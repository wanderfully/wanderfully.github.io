<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>&lt;div&gt;wander&lt;div&gt;写鬼写妖高人一筹&lt;div&gt;&lt;div&gt;刺贪刺虐入目三分&lt;/div&gt;&lt;/div&gt;</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="wanderfully.club/"/>
  <updated>2019-09-29T04:25:33.087Z</updated>
  <id>wanderfully.club/</id>
  
  <author>
    <name>wander</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>解决vue3.0中ts中引入js问题和包没有ts版本的报错问题</title>
    <link href="wanderfully.club/2019/09/29/3-0%E4%B8%ADts%E4%B8%AD%E5%BC%95%E5%85%A5js%E9%97%AE%E9%A2%98%E5%92%8C%E5%8C%85%E6%B2%A1%E6%9C%89ts%E7%89%88%E6%9C%AC%E7%9A%84%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98/"/>
    <id>wanderfully.club/2019/09/29/3-0中ts中引入js问题和包没有ts版本的报错问题/</id>
    <published>2019-09-29T03:59:00.000Z</published>
    <updated>2019-09-29T04:25:33.087Z</updated>
    
    <content type="html"><![CDATA[<h3 id="在初入ts的时候发现在ts文件中引入js文件出现报错，直接导致不能跑起来，很难受，被困扰了好久。当然也有办法可以解决这个问题。"><a href="#在初入ts的时候发现在ts文件中引入js文件出现报错，直接导致不能跑起来，很难受，被困扰了好久。当然也有办法可以解决这个问题。" class="headerlink" title="在初入ts的时候发现在ts文件中引入js文件出现报错，直接导致不能跑起来，很难受，被困扰了好久。当然也有办法可以解决这个问题。"></a>在初入ts的时候发现在ts文件中引入js文件出现报错，直接导致不能跑起来，很难受，被困扰了好久。当然也有办法可以解决这个问题。</h3><p>拿vue 3.0来举例，比如我想在main.ts中想引入commom.js，进入后发现报错（缺少模块，或者什么不是一个模块什么的），这时我们需要写一个d.ts的声明文件，那么我们在common.js的同级目录写一个common.d.ts。然后在里面声明该js：如下 声明被export出去的类型是什么。这里是any<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> declare <span class="keyword">const</span> mx: any</span><br></pre></td></tr></table></figure></p><h3 id="还有一种情况是在vue3-0中引入插件包时没有ts版本的，也会出现报错，这个问题也可以通过加声明文件来解决。"><a href="#还有一种情况是在vue3-0中引入插件包时没有ts版本的，也会出现报错，这个问题也可以通过加声明文件来解决。" class="headerlink" title="还有一种情况是在vue3.0中引入插件包时没有ts版本的，也会出现报错，这个问题也可以通过加声明文件来解决。"></a>还有一种情况是在vue3.0中引入插件包时没有ts版本的，也会出现报错，这个问题也可以通过加声明文件来解决。</h3><p>举例：假如我引入了一个图片查看插件发现没有ts版本的，报错了。那么我们可以在node_module包中找到@types文件夹，在里面新建一个与插件同名的d.ts声明文件，（比如我一个插件名字叫vue-photo-preview，那么我找到@types文件夹，在里面新建vue-photo-preview.d.ts文件），然后为该文件声明。:如下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">declare <span class="built_in">module</span> <span class="string">"vue-photo-preview"</span> &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">const</span> install:any</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="在window上增加属性"><a href="#在window上增加属性" class="headerlink" title="在window上增加属性"></a>在window上增加属性</h3><p>我们不能直接window.属性 在window上增加属性，这样会报错。我们要先在全局window上声明window 上有这个属性，后才能调用属性<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// global 包裹</span></span><br><span class="line">declare global &#123;</span><br><span class="line">  interface Window &#123;</span><br><span class="line">    X: any</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.X</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;在初入ts的时候发现在ts文件中引入js文件出现报错，直接导致不能跑起来，很难受，被困扰了好久。当然也有办法可以解决这个问题。&quot;&gt;&lt;a href=&quot;#在初入ts的时候发现在ts文件中引入js文件出现报错，直接导致不能跑起来，很难受，被困扰了好久。当然也有办法可以解
      
    
    </summary>
    
      <category term="ts" scheme="wanderfully.club/categories/ts/"/>
    
    
      <category term="vue" scheme="wanderfully.club/tags/vue/"/>
    
      <category term="ts" scheme="wanderfully.club/tags/ts/"/>
    
  </entry>
  
  <entry>
    <title>python爬虫例子（抓取480看和meizitu）</title>
    <link href="wanderfully.club/2019/08/29/python%E7%88%AC%E8%99%AB%E4%BE%8B%E5%AD%90%EF%BC%88%E6%8A%93%E5%8F%96480%E7%9C%8B%E5%92%8Cmeizitu%EF%BC%89/"/>
    <id>wanderfully.club/2019/08/29/python爬虫例子（抓取480看和meizitu）/</id>
    <published>2019-08-29T02:27:47.000Z</published>
    <updated>2019-08-29T02:42:26.016Z</updated>
    
    <content type="html"><![CDATA[<!-- 已经写好的文章在对应的md文件头部添加top：{number}即可 数值越大优先级越高 --><h3 id="没事无聊看了一下python的爬虫例子，模仿着爬了480看网站的所有电影海报和名字，具体其他的资料还可以自己添加。"><a href="#没事无聊看了一下python的爬虫例子，模仿着爬了480看网站的所有电影海报和名字，具体其他的资料还可以自己添加。" class="headerlink" title="没事无聊看了一下python的爬虫例子，模仿着爬了480看网站的所有电影海报和名字，具体其他的资料还可以自己添加。"></a>没事无聊看了一下python的爬虫例子，模仿着爬了480看网站的所有电影海报和名字，具体其他的资料还可以自己添加。</h3><p>代码移步  <strong><a href="https://github.com/wanderfully/pythonDemo" target="_blank" rel="noopener">github</a></strong></p><h4 id="先要安装python环境，然后运行getMove-py（480看）和meizitu-py-福利丫-，然后等待抓取信息。"><a href="#先要安装python环境，然后运行getMove-py（480看）和meizitu-py-福利丫-，然后等待抓取信息。" class="headerlink" title="先要安装python环境，然后运行getMove.py（480看）和meizitu.py(福利丫)，然后等待抓取信息。"></a>先要安装python环境，然后运行getMove.py（480看）和meizitu.py(福利丫)，然后等待抓取信息。</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- 已经写好的文章在对应的md文件头部添加top：{number}即可 数值越大优先级越高 --&gt;
&lt;h3 id=&quot;没事无聊看了一下python的爬虫例子，模仿着爬了480看网站的所有电影海报和名字，具体其他的资料还可以自己添加。&quot;&gt;&lt;a href=&quot;#没事无聊看了一下py
      
    
    </summary>
    
      <category term="python" scheme="wanderfully.club/categories/python/"/>
    
    
      <category term="python" scheme="wanderfully.club/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>git命令</title>
    <link href="wanderfully.club/2019/07/16/git%E5%91%BD%E4%BB%A4/"/>
    <id>wanderfully.club/2019/07/16/git命令/</id>
    <published>2019-07-16T01:44:07.000Z</published>
    <updated>2019-07-19T10:24:07.248Z</updated>
    
    <content type="html"><![CDATA[<!-- 已经写好的文章在对应的md文件头部添加top：{number}即可 数值越大优先级越高 --><h3 id="关联远程分支"><a href="#关联远程分支" class="headerlink" title="关联远程分支"></a>关联远程分支</h3><blockquote><p>git remote add origin <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:michaelliao/learngit.git</p></blockquote><h3 id="提交到远程分支"><a href="#提交到远程分支" class="headerlink" title="提交到远程分支"></a>提交到远程分支</h3><blockquote><p>git push origin dev  // （git push -u origin master）</p></blockquote><h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><blockquote><p>git branch dev</p></blockquote><h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><blockquote><p>git branch -d <name></name></p></blockquote><h3 id="查看当前本地分支"><a href="#查看当前本地分支" class="headerlink" title="查看当前本地分支"></a>查看当前本地分支</h3><blockquote><p>git branch</p></blockquote><h3 id="查看远程分支"><a href="#查看远程分支" class="headerlink" title="查看远程分支"></a>查看远程分支</h3><blockquote><p>git branch -a</p></blockquote><h3 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h3><p>git checkout master</p><h3 id="新建分支并转到该分支"><a href="#新建分支并转到该分支" class="headerlink" title="新建分支并转到该分支"></a>新建分支并转到该分支</h3><p>git checkout -b <name></name></p><h3 id="撤销暂存add"><a href="#撤销暂存add" class="headerlink" title="撤销暂存add"></a>撤销暂存add</h3><p>git reset <name></name></p><h3 id="查看版本提交记录"><a href="#查看版本提交记录" class="headerlink" title="查看版本提交记录"></a>查看版本提交记录</h3><p>git reflog</p><h3 id="回到某个版本"><a href="#回到某个版本" class="headerlink" title="回到某个版本"></a>回到某个版本</h3><p>git reset –hard &lt;版本号&gt;</p><h3 id="合并本地分支"><a href="#合并本地分支" class="headerlink" title="合并本地分支"></a>合并本地分支</h3><p>git merge dev</p><h3 id="合并远程分支"><a href="#合并远程分支" class="headerlink" title="合并远程分支"></a>合并远程分支</h3><ul><li>在本地新建一个与远程的dev版本相同(被合并的版本)的dev分支 git checkout -b dev origin/dev</li><li>返回到master版本  git checkout master</li><li>把本地的dev合并到master  git merge dev</li><li>把本地的master同步到远程  git push origin master</li></ul><h3 id="保存当前工作目录"><a href="#保存当前工作目录" class="headerlink" title="保存当前工作目录"></a>保存当前工作目录</h3><p>1 当正在dev分支上开发某个项目，这时项目中出现一个bug，需要紧急修复，但是正在开发的内容只是完成一半，还不想提交，这时可以用git stash命令将修改的内容保存至堆栈区，然后顺利切换到hotfix分支进行bug修复，修复完成后，再次切回到dev分支，从堆栈中恢复刚刚保存的内容。<br>2 由于疏忽，本应该在dev分支开发的内容，却在master上进行了开发，需要重新切回到dev分支上进行开发，可以用git stash将内容保存至堆栈中，切回到dev分支后，再次恢复内容即可。<br>总的来说，git stash命令的作用就是将目前还不想提交的但是已经修改的内容进行保存至堆栈中，后续可以在某个分支上恢复出堆栈中的内容。这也就是说，stash中的内容不仅仅可以恢复到原先开发的分支，也可以恢复到其他任意指定的分支上。git stash作用的范围包括工作区和暂存区中的内容，也就是说没有提交的内容都会保存至堆栈中。</p><blockquote><p>git stash //将所有未提交的（工作区和暂存区）保存到堆栈中，用于后怒恢复当前工作目录<br>git stash list //查看stash中的内容<br>git stash pop //将当前stash暂存的内容弄出来，并应用到当前分支对应的工作目录上（该命令将堆栈中最近保存的内容删除）<br>git stash apply //将当前stash暂存的内容弄出来，并应用到当前分支对应的工作目录上（该命令不会将内容从堆栈中删除，可用于多个分支）<br>git stash drop + 名称 //从栈堆中删除指定stash<br>git stash clear //清除所有<br>git stash show //查看栈堆中最新保存的stash和当前目录的差异（git stash show -p ）查看详细的不同<br>git stash branch //从最新的stash创建分支。<br>应用场景：当储藏了部分工作，暂时不去理会，继续在当前分支进行开发</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- 已经写好的文章在对应的md文件头部添加top：{number}即可 数值越大优先级越高 --&gt;
&lt;h3 id=&quot;关联远程分支&quot;&gt;&lt;a href=&quot;#关联远程分支&quot; class=&quot;headerlink&quot; title=&quot;关联远程分支&quot;&gt;&lt;/a&gt;关联远程分支&lt;/h3&gt;&lt;blo
      
    
    </summary>
    
      <category term="工具" scheme="wanderfully.club/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="git" scheme="wanderfully.club/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>js中的装饰器</title>
    <link href="wanderfully.club/2019/07/04/js%E4%B8%AD%E7%9A%84%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    <id>wanderfully.club/2019/07/04/js中的装饰器/</id>
    <published>2019-07-04T09:34:10.000Z</published>
    <updated>2019-08-29T02:48:10.856Z</updated>
    
    <content type="html"><![CDATA[<!-- 已经写好的文章在对应的md文件头部添加top：{number}即可 数值越大优先级越高 --><h3 id="ES7的装饰器"><a href="#ES7的装饰器" class="headerlink" title="ES7的装饰器"></a>ES7的装饰器</h3><p>js在ES7中加入了装饰器，不过依赖于ES5的 <strong>Object.defineProperty</strong>方法</p><h3 id="Object-defineProperty"><a href="#Object-defineProperty" class="headerlink" title="Object.defineProperty"></a>Object.defineProperty</h3><p>Object.defineProperty()方法会直接在一个对象上定义一个新的属性,或者修改一个对象的现有属性， 并返回这个对象。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(obj, prop, descriptor)</span><br></pre></td></tr></table></figure><ul><li>obj：要在其上定义属性的对象。</li><li>prop：要定义或修改的属性的名称。</li><li>descriptor：将被定义或修改的<strong>属性描述符</strong>，</li><li>返回值：被传递给函数的对象</li></ul><p>属性描述</p><ul><li>enumerable：可以是否可枚举</li><li>configurable：是否可删除</li><li>value：对应值</li><li>writable：是否可被重写修改</li><li>get：一个给属性提供 getter 的方法，如果没有 getter 则为 undefined。该方法返回值被用作属性值。默认为 undefined</li><li>一个给属性提供 setter 的方法，如果没有 setter 则为 undefined。该方法将接受唯一参数，并将该参数的新值分配给该属性。默认为 undefined</li></ul><h3 id="四种装饰器："><a href="#四种装饰器：" class="headerlink" title="四种装饰器："></a>四种装饰器：</h3><p>类装饰器、属性装饰器、方法装饰器、参数装饰器。<br>我们为什么要使用装饰器，有些时候，我们会对传入参数的类型判断、对返回值的排序、过滤、对函数添加节流、防抖或其他的功能性代码，基于多个类的继承，各种各样的与函数逻辑本身无关的重复性代码。</p><h3 id="类装饰器"><a href="#类装饰器" class="headerlink" title="类装饰器"></a>类装饰器</h3><ul><li>类装饰器在类声明前被声明，类装饰器应用于类构造函数，可以用来 监视、修改、或替换类定义。类装饰器不能用在声明文件中（.d.ts），也不能用在任何外部上下文中。</li><li>类装饰器表达式会在运行是当做函数被调用，累的构造函数作为其唯一的参数。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sealed</span>(<span class="params">constructor:Function</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// console.log(constructor)</span></span><br><span class="line">    <span class="built_in">Object</span>.seal(<span class="keyword">constructor</span>)</span><br><span class="line">    Object.seal(<span class="keyword">constructor</span>.prototype)</span><br><span class="line">&#125;</span><br><span class="line">  //如果还需要传参数，可以在装饰器外面再封装一层函数。</span><br><span class="line">function sealed1(namecn,age)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target</span>)</span>&#123;</span><br><span class="line">    target.prototype.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'i am eating fish'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(target.prototype,<span class="string">'age'</span>,&#123;</span><br><span class="line">    value:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"ageoooooo"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">console</span>.dir(target)<span class="comment">//唯一参数构造函数，可往构造函数加属性方法等</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">@sealed1(<span class="string">"wander"</span>,<span class="string">"13"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> a: number = <span class="number">0</span>;</span><br><span class="line">b: string = <span class="string">"hello"</span></span><br><span class="line">age?</span><br><span class="line">eat?</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> MyClass()</span><br><span class="line">obj.age()<span class="comment">//</span></span><br><span class="line">obj.eat()</span><br></pre></td></tr></table></figure></li></ul><h3 id="属性装饰器"><a href="#属性装饰器" class="headerlink" title="属性装饰器"></a>属性装饰器</h3><ul><li>性装饰器声明在一个属性声明之前（紧靠着属性声明）。属性装饰器不能用在声明文件中（.d.ts），或者任何外部上下文（如declare类里）</li><li>属性装饰器表达式会在运行时当做函数被调用，传入2个参数</li><li>第一个参数：对于静态成员来说是类的构造函数，对于实例成员是类的原型对象</li><li>第二个参数：成员的名字</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">propDecorator</span>(<span class="params">param1:boolean,param2?: string</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target:any,propertyKey:string</span>)</span>&#123;<span class="comment">//第一个是静态成员的构造函数，第二个是属性名字</span></span><br><span class="line">      <span class="comment">// console.dir(param1 + "," + param2 +"," + target + ", " + propertyKey);//对实例成员 是类的原型对象</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">propClass</span></span>&#123;</span><br><span class="line">    @propDecorator(<span class="literal">false</span>,<span class="string">'hi'</span>)<span class="comment">//传的参数，当然是可以选择的 输出 false,hi,function propClass() &#123;this.a = "hello";&#125;, A</span></span><br><span class="line">    public <span class="keyword">static</span> A:number = <span class="number">0</span>;</span><br><span class="line">    @propDecorator(<span class="literal">true</span>,<span class="string">"wander"</span>)<span class="comment">//true,wander,[object Object], a</span></span><br><span class="line">    public a: string = <span class="string">"hello"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="built_in">console</span>.log(propClass.A)<span class="comment">//0</span></span><br><span class="line"><span class="keyword">var</span> propObj = <span class="keyword">new</span> propClass();</span><br></pre></td></tr></table></figure><h3 id="方法装饰器"><a href="#方法装饰器" class="headerlink" title="方法装饰器"></a>方法装饰器</h3><ul><li>方法装饰器声明在一个方法的声明之前（紧靠方法声明）。它会被应用到方法的属性描述符上，可以用来监视，修改或者替换方法的定义。方法装饰器不能用在声明文件中（.d.ts），或者任何外部上下文（如declare类里）</li><li>方法装饰器会在运行时当做函数被调用，传入3个参数</li><li>第一个参数：是静态成员的构造函数 </li><li>第二个参数：成员方法的名字</li><li>第三个参数：成员的属性描述（是非可枚举，可写可读等）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">methodDecortor</span>(<span class="params">param1:boolean</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target:any,propertyKey:string,descripter</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// console.dir(descripter)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MethodClass</span></span>&#123;</span><br><span class="line">  @methodDecortor(<span class="literal">true</span>)<span class="comment">//function MethodClass() &#123;&#125;, func1, [object Object] 静态方法时第一个参数是构造函数</span></span><br><span class="line">  public <span class="keyword">static</span> func1():<span class="keyword">void</span>&#123;</span><br><span class="line">    <span class="comment">// console.log("staic method")</span></span><br><span class="line">  &#125;</span><br><span class="line">  @methodDecortor(<span class="literal">true</span>)<span class="comment">//[object Object], func2, [object Object]</span></span><br><span class="line">  func2()&#123;</span><br><span class="line">    <span class="comment">// console.log("method")</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参数装饰器"><a href="#参数装饰器" class="headerlink" title="参数装饰器"></a>参数装饰器</h3><ul><li>声明在一个参数声明之前（紧靠着参数声明）。参数装饰器应用于类构造函数或或方法声明，参数装饰器不能用在声明文件（.d.ts），重载或其他外部上下文（比如declare的类里）</li><li>参数装饰器表达式会在运行时当做函数被调用，传入3个参数</li><li>第一个参数：类构造函数</li><li>第二个参数：成员的名字</li><li>第三个参数：参数在函数参数列表中的索引</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">paramDecorator</span>(<span class="params">target:Object, propertyKey:string | symbol,paramIndex:number</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// console.log(target+', '+ &lt;any&gt;propertyKey + ", " + paramIndex)</span></span><br><span class="line">  <span class="comment">// [object Object], func, 2</span></span><br><span class="line">  <span class="comment">// [object Object], func, 1</span></span><br><span class="line">  <span class="comment">// [object Object], func, 0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParamClass</span></span>&#123;</span><br><span class="line">  public func(@paramDecorator a: number,@paramDecorator b: string = <span class="string">"hello"</span>, @paramDecorator c?: boolean):<span class="keyword">void</span>&#123;</span><br><span class="line">    <span class="comment">// console.log("call method")</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="补充：Angular中的内置装饰器"><a href="#补充：Angular中的内置装饰器" class="headerlink" title="补充：Angular中的内置装饰器"></a>补充：Angular中的内置装饰器</h3><ul><li>类装饰器：@Component、@NgModule、@Pipe、@Injectable</li><li>属性装饰器：@Input、@Output、@ContentChild、@ContentChildren、@ViewChild、@ViewChildren</li><li>方法装饰器：@HostListener</li><li>参数装饰器：@Inject、@Optional、@Self、@SkipSelf、@Host</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- 已经写好的文章在对应的md文件头部添加top：{number}即可 数值越大优先级越高 --&gt;
&lt;h3 id=&quot;ES7的装饰器&quot;&gt;&lt;a href=&quot;#ES7的装饰器&quot; class=&quot;headerlink&quot; title=&quot;ES7的装饰器&quot;&gt;&lt;/a&gt;ES7的装饰器&lt;/h3&gt;
      
    
    </summary>
    
      <category term="js" scheme="wanderfully.club/categories/js/"/>
    
    
      <category term="装饰器" scheme="wanderfully.club/tags/%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    
      <category term="js" scheme="wanderfully.club/tags/js/"/>
    
      <category term="ES7" scheme="wanderfully.club/tags/ES7/"/>
    
  </entry>
  
  <entry>
    <title>jQuery中常用的元素查找方法总结</title>
    <link href="wanderfully.club/2019/06/25/jQuery%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E5%85%83%E7%B4%A0%E6%9F%A5%E6%89%BE%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>wanderfully.club/2019/06/25/jQuery中常用的元素查找方法总结/</id>
    <published>2019-06-25T04:23:48.000Z</published>
    <updated>2019-06-25T06:20:28.191Z</updated>
    
    <content type="html"><![CDATA[<!-- 已经写好的文章在对应的md文件头部添加top：{number}即可 数值越大优先级越高 --><h3 id="层叠选择器"><a href="#层叠选择器" class="headerlink" title="层叠选择器"></a>层叠选择器</h3><ul><li>$(“form input”) 选择所有的form元素中的input元素 </li><li>$(“#main &gt; *”)  选择id值为main的所有的子元素 </li><li>$(“label + input”) 选择所有的label元素的下一个input元素节点，经测试选择器返回的是label标签后面直接跟一个input标签的所有input标签元素 </li><li>$(“#prev ~ div”) 同胞选择器，该选择器返回的为id为prev的标签元素的所有的属于同一个父元素的div标签</li></ul><h3 id="基本过滤选择器"><a href="#基本过滤选择器" class="headerlink" title="基本过滤选择器"></a>基本过滤选择器</h3><ul><li>$(“tr:first”) 选择所有tr元素的第一个 </li><li>$(“tr:last”)  选择所有tr元素的最后一个 </li><li>$(“input:not(:checked) + span”)  </li></ul><h3 id="过滤掉：checked的选择器的所有的input元素"><a href="#过滤掉：checked的选择器的所有的input元素" class="headerlink" title="过滤掉：checked的选择器的所有的input元素"></a>过滤掉：checked的选择器的所有的input元素</h3><ul><li>$(“tr:even”)   选择所有的tr元素的第0，2，4… …个元素（注意：因为所选择的多个元素时为数组，所以序号是从0开始） </li><li>$(“tr:odd”)    选择所有的tr元素的第1，3，5… …个元素 </li><li>$(“td:eq(2)”)  选择所有的td元素中序号为2的那个td元素 </li><li>$(“td:gt(4)”)  选择td元素中序号大于4的所有td元素 </li><li>$(“td:ll(4)”)  选择td元素中序号小于4的所有的td元素 </li></ul><h3 id="内容过滤选择器"><a href="#内容过滤选择器" class="headerlink" title="内容过滤选择器"></a>内容过滤选择器</h3><ul><li>$(“div:contains(‘John’)”)    选择所有div中含有John文本的元素 </li><li>$(“td:empty”)                选择所有的为空（也不包括文本节点）的td元素的数组 </li><li>$(“div:has(p)”)              选择所有含有p标签的div元素 </li><li>$(“td:parent”)               选择所有的以td为父节点的元素数组</li></ul><h3 id="属性过滤选择器"><a href="#属性过滤选择器" class="headerlink" title="属性过滤选择器"></a>属性过滤选择器</h3><ul><li>$(“div[id]”)              选择所有含有id属性的div元素 </li><li>$(“input[name=’newsletter’]”)    选择所有的name属性等于’newsletter’的input元素 </li><li>$(“input[name!=’newsletter’]”)   选择所有的name属性不等于’newsletter’的input元素 </li><li>$(“input[name^=’news’]”)         选择所有的name属性以’news’开头的input元素 </li><li>$(“input[name$=’news’]”)         选择所有的name属性以’news’结尾的input元素 </li><li>$(“input[name*=’man’]”)          选择所有的name属性包含’news’的input元素 </li><li>$(“input[id][name$=’man’]”)    可以使用多个属性进行联合选择，该选择器是得到所有的含有id属性并且那么属性以man结尾的元素</li></ul><h3 id="子元素过滤选择器"><a href="#子元素过滤选择器" class="headerlink" title="子元素过滤选择器"></a>子元素过滤选择器</h3><ul><li>$(“ul li:nth-child(2)”),$(“ul li:nth-child(odd)”),$(“ul li:nth-child(3n + 1)”) </li><li>$(“div span:first-child”)   返回所有的div元素的第一个子节点的数组 </li><li>$(“div span:last-child”)    返回所有的div元素的最后一个节点的数组 </li><li>$(“div button:only-child”)  返回所有的div中只有唯一一个子节点的所有子节点的数组</li></ul><h3 id="表单元素选择器"><a href="#表单元素选择器" class="headerlink" title="表单元素选择器"></a>表单元素选择器</h3><ul><li>$(“:input”)       选择所有的表单输入元素，包括input, textarea, select 和 button </li><li>$(“:text”)        选择所有的text input元素 </li><li>$(“:password”)    选择所有的password input元素 </li><li>$(“:radio”)       选择所有的radio input元素 </li><li>$(“:checkbox”)    选择所有的checkbox input元素 </li><li>$(“:submit”)      选择所有的submit input元素 </li><li>$(“:image”)       选择所有的image input元素 </li><li>$(“:reset”)       选择所有的reset input元素 </li><li>$(“:button”)      选择所有的button input元素 </li><li>$(“:file”)        选择所有的file input元素 </li><li>$(“:hidden”)      选择所有类型为hidden的input元素或表单的隐藏域</li></ul><h3 id="表单元素过滤选择器"><a href="#表单元素过滤选择器" class="headerlink" title="表单元素过滤选择器"></a>表单元素过滤选择器</h3><ul><li>$(“:enabled”)   选择所有的可操作的表单元素 </li><li>$(“:disabled”)  选择所有的不可操作的表单元素 </li><li>$(“:checked”)   选择所有的被checked的表单元素 </li><li>$(“select option:selected”) 选择所有的select 的子元素中被selected的元素</li></ul><blockquote><p>选取一个name 为”S_03_22″的input text框的上一个td的text值<br>$(”input[@name =S_03_22]“).parent().prev().text()<br>名字以”S_”开始，并且不是以”<em>R”结尾的<br>$(”input[@name ^=’S</em>‘]“).not(”[@name $=’_R’]“)<br>一个名为radio_01的radio所选的值<br>$(”input[@name =radio_01][@checked]“).val();</p></blockquote><ul><li>$(“A B”) 查找A元素下面的所有子节点，包括非直接子节点</li><li>$(“A&gt;B”) 查找A元素下面的直接子节点</li><li>$(“A+B”) 查找A元素后面的兄弟节点，包括非直接子节点</li><li>$(“A~B”) 查找A元素后面的兄弟节点，不包括非直接子节点</li><li>$(“A B”) 查找A元素下面的所有子节点，包括非直接子节点 </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- 已经写好的文章在对应的md文件头部添加top：{number}即可 数值越大优先级越高 --&gt;
&lt;h3 id=&quot;层叠选择器&quot;&gt;&lt;a href=&quot;#层叠选择器&quot; class=&quot;headerlink&quot; title=&quot;层叠选择器&quot;&gt;&lt;/a&gt;层叠选择器&lt;/h3&gt;&lt;ul&gt;
&lt;li
      
    
    </summary>
    
      <category term="jQuery" scheme="wanderfully.club/categories/jQuery/"/>
    
    
      <category term="jq元素查找" scheme="wanderfully.club/tags/jq%E5%85%83%E7%B4%A0%E6%9F%A5%E6%89%BE/"/>
    
  </entry>
  
  <entry>
    <title>我所了解的TypeScript</title>
    <link href="wanderfully.club/2019/06/20/%E6%88%91%E6%89%80%E4%BA%86%E8%A7%A3%E7%9A%84TypeScript/"/>
    <id>wanderfully.club/2019/06/20/我所了解的TypeScript/</id>
    <published>2019-06-20T06:23:16.000Z</published>
    <updated>2019-09-29T03:59:29.075Z</updated>
    
    <content type="html"><![CDATA[<!-- 已经写好的文章在对应的md文件头部添加top：{number}即可 数值越大优先级越高 --><h3 id="新的类型"><a href="#新的类型" class="headerlink" title="新的类型"></a>新的类型</h3><ul><li>元组 Tuple</li><li>枚举 enum</li><li>Any Void</li></ul><h3 id="元组就是具有具体类型元素的数组-元素类型一一对应"><a href="#元组就是具有具体类型元素的数组-元素类型一一对应" class="headerlink" title="元组就是具有具体类型元素的数组,元素类型一一对应"></a>元组就是具有具体类型元素的数组,元素类型一一对应</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> list: [number, string, string] = [<span class="number">24</span>, <span class="string">"Indrek"</span> , <span class="string">"Lasn"</span>]</span><br></pre></td></tr></table></figure><h3 id="数组泛型，Array-lt-元素类型-gt"><a href="#数组泛型，Array-lt-元素类型-gt" class="headerlink" title="数组泛型，Array&lt;元素类型&gt;"></a>数组泛型，Array&lt;元素类型&gt;</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list: <span class="built_in">Array</span>&lt;number&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure><h3 id="枚举-为一组数值赋予名字"><a href="#枚举-为一组数值赋予名字" class="headerlink" title="枚举 为一组数值赋予名字"></a>枚举 为一组数值赋予名字</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">enum Color &#123;</span><br><span class="line">    Red = <span class="number">1</span>,</span><br><span class="line">    Green = <span class="number">2</span>,</span><br><span class="line">    Blue = <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> c: Color = Color.Green;</span><br><span class="line"><span class="keyword">let</span> colorName: string = Color[<span class="number">2</span>];<span class="comment">//Green</span></span><br></pre></td></tr></table></figure><h3 id="void-加了void的方法表示没有返回值，不能加return"><a href="#void-加了void的方法表示没有返回值，不能加return" class="headerlink" title="void 加了void的方法表示没有返回值，不能加return"></a>void 加了void的方法表示没有返回值，不能加return</h3><h3 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h3><blockquote><p>类型断言就是可以手动指定一个值的类型  有两种写法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> someValue: any = <span class="string">"this is a string"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> strLength: number = (&lt;string&gt;someValue).length;</span><br><span class="line">let strLength: number = (someValue as string).length;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="泛型：Generics"><a href="#泛型：Generics" class="headerlink" title="泛型：Generics"></a>泛型：Generics</h3><h4 id="泛型方法-有两种声明和调用泛型方法"><a href="#泛型方法-有两种声明和调用泛型方法" class="headerlink" title="泛型方法 有两种声明和调用泛型方法"></a>泛型方法 有两种声明和调用泛型方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gen_fun1</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>):<span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="keyword">let</span> gen_fun2: &lt;T&gt;(arg: T) =&gt; T = function(arg)&#123;</span><br><span class="line">    return arg;    </span><br><span class="line">&#125;</span><br><span class="line">//调用：</span><br><span class="line">gen_fun1&lt;string&gt;("hello word")</span><br><span class="line">gen_fun2("hello word") //可省略类型参数，因为编译器会根据传入参数来自动识别对应的类型。</span><br></pre></td></tr></table></figure><h4 id="泛型与Any"><a href="#泛型与Any" class="headerlink" title="泛型与Any"></a>泛型与Any</h4><blockquote><p>Ts 的特殊类型 Any 在具体使用时，可以代替任意类型，两者好像没啥区别，其实不然<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">any_func</span>(<span class="params">arg: any</span>): <span class="title">any</span></span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arg.length)</span><br><span class="line">    <span class="keyword">return</span> arg</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">array_func</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: Array&lt;T&gt;</span>): <span class="title">Array</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arg.length)</span><br><span class="line">    <span class="keyword">return</span> arg</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方法一，打印了arg参数的length属性。因为any可以代替任意类型，所以该方法在传入参数不是数组或者带有length属性对象时，会抛出异常。</span></span><br><span class="line"><span class="comment">//方法二，定义了参数类型是Array的泛型类型，肯定会有length属性，所以不会抛出异常。</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="泛型类型：（泛型接口）"><a href="#泛型类型：（泛型接口）" class="headerlink" title="泛型类型：（泛型接口）"></a>泛型类型：（泛型接口）</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">interface Gnerices_interface&lt;T&gt;&#123;</span><br><span class="line">    (arg: T): T;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcDemo</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> func1: Generices_interface&lt;number&gt; = funcDemo; <span class="comment">//在使用的时候指定具体类型</span></span><br><span class="line">func1(<span class="number">111</span>)<span class="comment">//正确</span></span><br><span class="line">func1(<span class="string">'111'</span>)<span class="comment">//错误</span></span><br></pre></td></tr></table></figure><h3 id="interface和type区别"><a href="#interface和type区别" class="headerlink" title="interface和type区别"></a>interface和type区别</h3><ul><li><p>相同点：都可相互继承</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//interface extends interface</span></span><br><span class="line">interface Name &#123; </span><br><span class="line">  name: string; </span><br><span class="line">&#125;</span><br><span class="line">interface User extends Name &#123; </span><br><span class="line">  age: number; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//type extends type</span></span><br><span class="line">type Name = &#123; </span><br><span class="line">  name: string; </span><br><span class="line">&#125;</span><br><span class="line">type User = Name &amp; &#123; <span class="attr">age</span>: number  &#125;;</span><br><span class="line"><span class="comment">//interface extends type</span></span><br><span class="line">type Name = &#123; </span><br><span class="line">  name: string; </span><br><span class="line">&#125;</span><br><span class="line">interface User extends Name &#123; </span><br><span class="line">  age: number; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//type extends interface</span></span><br><span class="line">interface Name &#123; </span><br><span class="line">  name: string; </span><br><span class="line">&#125;</span><br><span class="line">type User = Name &amp; &#123; </span><br><span class="line">  age: number; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>不同点：type 可以声明基本类型别名，联合类型，元组等类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基本类型别名</span></span><br><span class="line">type Name = string</span><br><span class="line"></span><br><span class="line"><span class="comment">// 联合类型</span></span><br><span class="line">interface Dog &#123;</span><br><span class="line">    wong();</span><br><span class="line">&#125;</span><br><span class="line">interface Cat &#123;</span><br><span class="line">    miao();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type Pet = Dog | Cat</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体定义数组每个位置的类型</span></span><br><span class="line">type PetList = [Dog, Pet]</span><br><span class="line"><span class="comment">//其他</span></span><br><span class="line">type StringOrNumber = string | number;  </span><br><span class="line">type Text = string | &#123; <span class="attr">text</span>: string &#125;;  </span><br><span class="line">type NameLookup = Dictionary&lt;string, Person&gt;;  </span><br><span class="line">type Callback&lt;T&gt; = <span class="function">(<span class="params">data: T</span>) =&gt;</span> <span class="keyword">void</span>;  </span><br><span class="line">type Pair&lt;T&gt; = [T, T];  </span><br><span class="line">type Coordinates = Pair&lt;number&gt;;  </span><br><span class="line">type Tree&lt;T&gt; = T | &#123; <span class="attr">left</span>: Tree&lt;T&gt;, <span class="attr">right</span>: Tree&lt;T&gt; &#125;;</span><br></pre></td></tr></table></figure></li><li><p>不同点：interface 能够声明合并</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">interface User &#123;</span><br><span class="line">  name: string</span><br><span class="line">  age: number</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface User &#123;</span><br><span class="line">  sex: string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">User 接口为 &#123;</span></span><br><span class="line"><span class="comment">  name: string</span></span><br><span class="line"><span class="comment">  age: number</span></span><br><span class="line"><span class="comment">  sex: string </span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>不同点：interface 有可选属性和只读属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可选属性用问号标记</span></span><br><span class="line">interface Person &#123;</span><br><span class="line">  name: string;</span><br><span class="line">  age?: number;</span><br><span class="line">  gender?: number;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//只读属性 添加readonly 关键字来修饰</span></span><br><span class="line">interface User &#123;</span><br><span class="line">    readonly loginName: string;</span><br><span class="line">    password: string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- 已经写好的文章在对应的md文件头部添加top：{number}即可 数值越大优先级越高 --&gt;
&lt;h3 id=&quot;新的类型&quot;&gt;&lt;a href=&quot;#新的类型&quot; class=&quot;headerlink&quot; title=&quot;新的类型&quot;&gt;&lt;/a&gt;新的类型&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;元组 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>工欲善其事，必先利其器</title>
    <link href="wanderfully.club/2019/06/14/%E5%B7%A5%E6%AC%B2%E5%96%84%E5%85%B6%E4%BA%8B%EF%BC%8C%E5%BF%85%E5%85%88%E5%88%A9%E5%85%B6%E5%99%A8/"/>
    <id>wanderfully.club/2019/06/14/工欲善其事，必先利其器/</id>
    <published>2019-06-14T02:12:33.000Z</published>
    <updated>2019-07-04T09:28:47.710Z</updated>
    
    <content type="html"><![CDATA[<!-- 已经写好的文章在对应的md文件头部添加top：{number}即可 数值越大优先级越高 --><h3 id="搭建本地服务（简单，可自动刷新）"><a href="#搭建本地服务（简单，可自动刷新）" class="headerlink" title="搭建本地服务（简单，可自动刷新）"></a>搭建本地服务（简单，可自动刷新）</h3><blockquote><p>安装 lite-server 包即可,修改package.json文件，加入如下语句<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;    </span><br><span class="line">   <span class="string">"dev"</span>: <span class="string">"lite-server"</span></span><br><span class="line"> &#125;,</span><br><span class="line"><span class="comment">//若想更改浏览器端口，新建bs.config.js并写入以下内容</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"port"</span>: <span class="number">8000</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="工具类。"><a href="#工具类。" class="headerlink" title="工具类。"></a>工具类。</h3><ul><li><a href="https://www.fancynode.com.cn/pxcook" target="_blank" rel="noopener"><strong>PxCook</strong></a> ui工具，识别psd，可以快速获取页面元素的尺寸、信息、颜色等，甚至你可以用它生成的css，再也不用去测量元素尺寸了。</li><li><a href="https://www.processon.com/" target="_blank" rel="noopener"><strong>在线画流程图工具</strong></a> 它可以在线画流程图、思维导图、UI原型图、UML、网络拓扑图、组织结构图等等</li><li><a href="https://caniuse.com/" target="_blank" rel="noopener"><strong>can i use</strong></a> 浏览器兼容</li><li><a href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noopener"><strong>图床工具PicGo</strong></a> 生成外链 解决markdown 上放图片问题。</li><li><a href="http://xuanfengge.com/easeing/ceaser/" target="_blank" rel="noopener"><strong>css动画函数预览生成</strong></a> 贝赛尔曲线</li><li><a href="https://www.toptal.com/developers/css/sprite-generator" target="_blank" rel="noopener"><strong>上传图片生成雪碧图</strong></a> css 图片定位也有,很方便</li><li><a href="https://tool.lu/" target="_blank" rel="noopener"><strong>在线工具众多集合</strong></a> 一定有你用得着的(正则、时间、文字加解密等)</li><li><a href="https://cdn.baomitu.com/" target="_blank" rel="noopener">https://cdn.baomitu.com/</a> 和 <a href="https://www.bootcdn.cn/" target="_blank" rel="noopener">https://www.bootcdn.cn/</a> 国内CDN库</li></ul><h3 id="在线代码编辑"><a href="#在线代码编辑" class="headerlink" title="在线代码编辑"></a>在线代码编辑</h3><ul><li><a href="https://jsrun.net/" target="_blank" rel="noopener"><strong>https://jsrun.net/</strong></a> 国内</li></ul><h3 id="编程题库"><a href="#编程题库" class="headerlink" title="编程题库"></a>编程题库</h3><ul><li><a href="https://www.freecodecamp.cn/" target="_blank" rel="noopener"><strong>https://www.freecodecamp.cn/</strong></a> 旧版</li><li><a href="https://www.freecodecamp.one/" target="_blank" rel="noopener"><strong>https://www.freecodecamp.one/</strong></a> 新版</li><li><a href="https://leetcode-cn.com/" target="_blank" rel="noopener"><strong>https://leetcode-cn.com/</strong></a> leetcode中文版</li><li><a href="http://www.acmcoder.com/index" target="_blank" rel="noopener"><strong>http://www.acmcoder.com/index</strong></a> 赛马</li><li><a href="http://www.codecademy.com/" target="_blank" rel="noopener"><strong>http://www.codecademy.com/</strong></a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- 已经写好的文章在对应的md文件头部添加top：{number}即可 数值越大优先级越高 --&gt;
&lt;h3 id=&quot;搭建本地服务（简单，可自动刷新）&quot;&gt;&lt;a href=&quot;#搭建本地服务（简单，可自动刷新）&quot; class=&quot;headerlink&quot; title=&quot;搭建本地服务（
      
    
    </summary>
    
      <category term="工具" scheme="wanderfully.club/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
  </entry>
  
  <entry>
    <title>简单理解的Promise</title>
    <link href="wanderfully.club/2019/06/12/%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3%E7%9A%84Promise/"/>
    <id>wanderfully.club/2019/06/12/简单理解的Promise/</id>
    <published>2019-06-12T03:37:20.000Z</published>
    <updated>2019-06-12T07:56:17.412Z</updated>
    
    <content type="html"><![CDATA[<!-- 已经写好的文章在对应的md文件头部添加top：{number}即可 数值越大优先级越高 --><h3 id="以前看见Promise这个东西，不知道怎么用，总是去看别个教程的demo来理解，而且比较复杂的样子，然后似乎是理解，，但是心里面又不踏实，然后等下一次遇到或者需要用的时候发现并没有彻底弄懂，然后再去看。今天打开MDN过了一片Promise这个api，感觉别个教程写复杂了，想想还是该看文档加以自己的实践来彻底理解它。"><a href="#以前看见Promise这个东西，不知道怎么用，总是去看别个教程的demo来理解，而且比较复杂的样子，然后似乎是理解，，但是心里面又不踏实，然后等下一次遇到或者需要用的时候发现并没有彻底弄懂，然后再去看。今天打开MDN过了一片Promise这个api，感觉别个教程写复杂了，想想还是该看文档加以自己的实践来彻底理解它。" class="headerlink" title="以前看见Promise这个东西，不知道怎么用，总是去看别个教程的demo来理解，而且比较复杂的样子，然后似乎是理解，，但是心里面又不踏实，然后等下一次遇到或者需要用的时候发现并没有彻底弄懂，然后再去看。今天打开MDN过了一片Promise这个api，感觉别个教程写复杂了，想想还是该看文档加以自己的实践来彻底理解它。"></a>以前看见<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noopener"><strong>Promise</strong></a>这个东西，不知道怎么用，总是去看别个教程的demo来理解，而且比较复杂的样子，然后似乎是理解，，但是心里面又不踏实，然后等下一次遇到或者需要用的时候发现并没有彻底弄懂，然后再去看。今天打开MDN过了一片Promise这个api，感觉别个教程写复杂了，想想还是该看文档加以自己的实践来彻底理解它。</h3><blockquote><p>其实最核心的思想就是通过Promise这个构造函数创建的所有实例，它都会返回一个promise对象，它带有resolve回调的then()方法，和reject回调的catch()方法，还有无论成功与失败都会执行的finnaly()方法。最后你想怎么玩它怎么玩它。</p></blockquote><h3 id="首先来看Promise构造函数，它的形参是两个回调方法，一个resolve（成功情况），一个reject（失败情况），该构造函数所创建的实例会返回一个promise对象，该对象包括then-、catch-、finally-方法，"><a href="#首先来看Promise构造函数，它的形参是两个回调方法，一个resolve（成功情况），一个reject（失败情况），该构造函数所创建的实例会返回一个promise对象，该对象包括then-、catch-、finally-方法，" class="headerlink" title="首先来看Promise构造函数，它的形参是两个回调方法，一个resolve（成功情况），一个reject（失败情况），该构造函数所创建的实例会返回一个promise对象，该对象包括then()、catch()、finally()方法，"></a>首先来看<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noopener"><strong>Promise</strong></a>构造函数，它的形参是两个回调方法，一个resolve（成功情况），一个reject（失败情况），该构造函数所创建的实例会返回一个promise对象，该对象包括then()、catch()、finally()方法，</h3><ul><li>then()：成功时，第一个参数‘resolve’的回调</li><li>catch()：失败时,是第二个参数‘reject’的回调</li><li>finally：无论成功失败都执行</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> promise1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            resolve(&#123;</span><br><span class="line">                name:<span class="string">"wander"</span>,</span><br><span class="line">                age:<span class="number">18</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,<span class="number">3000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="built_in">console</span>.log(promise1)</span><br><span class="line">promise1.then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)<span class="comment">//执行了这里</span></span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;).finally(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"无论成功与否"</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="静态方法-Promise-resolve-value-，Promise-resolve-直接回调了resovle成功方法，然后返回一个promise对象-该对象通过then-可获取回调的值。"><a href="#静态方法-Promise-resolve-value-，Promise-resolve-直接回调了resovle成功方法，然后返回一个promise对象-该对象通过then-可获取回调的值。" class="headerlink" title="静态方法 Promise.resolve(value)，Promise.resolve 直接回调了resovle成功方法，然后返回一个promise对象,该对象通过then() 可获取回调的值。"></a>静态方法 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve" target="_blank" rel="noopener"><strong>Promise.resolve(value)</strong></a>，Promise.resolve 直接回调了resovle成功方法，然后返回一个promise对象,该对象通过then() 可获取回调的值。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> promise2 = <span class="built_in">Promise</span>.resolve(<span class="string">"成功"</span>)</span><br><span class="line"></span><br><span class="line">promise2.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)<span class="comment">//成功</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e)<span class="comment">// “可以这样写” 注意 then() 里面可以接受2个参数（你可以打印一下then这个方法），第一个是成功的方法回调，第二个是失败的方法回调，但是catch() 里面只接受一个参数 这里失败不会被调用</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="静态方法Promise-reject-value-，Promise-reject-直接回调了reject失败方法，然后返回一个promise对象，该对象通过catch-可获取回调的值"><a href="#静态方法Promise-reject-value-，Promise-reject-直接回调了reject失败方法，然后返回一个promise对象，该对象通过catch-可获取回调的值" class="headerlink" title="静态方法Promise.reject(value)，Promise.reject 直接回调了reject失败方法，然后返回一个promise对象，该对象通过catch() 可获取回调的值"></a>静态方法<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/reject" target="_blank" rel="noopener"><strong>Promise.reject(value)</strong></a>，Promise.reject 直接回调了reject失败方法，然后返回一个promise对象，该对象通过catch() 可获取回调的值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> promise3 = <span class="built_in">Promise</span>.reject(<span class="string">"失败"</span>)</span><br><span class="line"><span class="comment">//可直接调用catch方法</span></span><br><span class="line">promise3.catch(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)<span class="comment">//失败</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//或者这样写 第二个是返回失败的原因</span></span><br><span class="line">promise3.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)<span class="comment">//不会被调用</span></span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error)<span class="comment">//失败</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="静态方法Promise-race-iterable-，迭代器中是promise实例-方法返回一个promise，一单迭代器中的某一个promise成功或者失败，返回的promise就会成功或失败。"><a href="#静态方法Promise-race-iterable-，迭代器中是promise实例-方法返回一个promise，一单迭代器中的某一个promise成功或者失败，返回的promise就会成功或失败。" class="headerlink" title="静态方法Promise.race(iterable)，迭代器中是promise实例 方法返回一个promise，一单迭代器中的某一个promise成功或者失败，返回的promise就会成功或失败。"></a>静态方法<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/race" target="_blank" rel="noopener"><strong>Promise.race(iterable)</strong></a>，迭代器中是promise实例 方法返回一个promise，一单迭代器中的某一个promise成功或者失败，返回的promise就会成功或失败。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> promise4 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="string">"one"</span>)</span><br><span class="line">    &#125;,<span class="number">500</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> promise5 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="string">"two"</span>)</span><br><span class="line">    &#125;,<span class="number">100</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">Promise</span>.race([promise4,promise5]).then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value)<span class="comment">//two  哪个迭代器中哪个promise先完成 这里就返回哪一个的值</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="静态方法Promise-all-，Promise-all-iterable-方法返回一个Promise实例-在iterable中的所有promise实例-iterable中也可以不包含-promise-完成后（不管成功或者失败）-才会执行resolve或者reject回调方法，，，只有iterable中全部都成功（resovle）才会回调-Promise-all-的resolve方法，只要iterable中有一个promise实例失败（reject），那么Promise-all-返回的实例就会调用reject（）方法，回调返回的值是-所有iterable中的promsie回调的值的数组集合。"><a href="#静态方法Promise-all-，Promise-all-iterable-方法返回一个Promise实例-在iterable中的所有promise实例-iterable中也可以不包含-promise-完成后（不管成功或者失败）-才会执行resolve或者reject回调方法，，，只有iterable中全部都成功（resovle）才会回调-Promise-all-的resolve方法，只要iterable中有一个promise实例失败（reject），那么Promise-all-返回的实例就会调用reject（）方法，回调返回的值是-所有iterable中的promsie回调的值的数组集合。" class="headerlink" title="静态方法Promise.all()，Promise.all(iterable) 方法返回一个Promise实例, 在iterable中的所有promise实例(iterable中也可以不包含 promise)完成后（不管成功或者失败） 才会执行resolve或者reject回调方法，，，只有iterable中全部都成功（resovle）才会回调 Promise.all()的resolve方法，只要iterable中有一个promise实例失败（reject），那么Promise.all()返回的实例就会调用reject（）方法，回调返回的值是 所有iterable中的promsie回调的值的数组集合。"></a>静态方法<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/all" target="_blank" rel="noopener"><strong>Promise.all()</strong></a>，Promise.all(iterable) 方法返回一个Promise实例, 在iterable中的所有promise实例(iterable中也可以不包含 promise)完成后（不管成功或者失败） 才会执行resolve或者reject回调方法，，，只有iterable中全部都成功（resovle）才会回调 Promise.all()的resolve方法，只要iterable中有一个promise实例失败（reject），那么Promise.all()返回的实例就会调用reject（）方法，回调返回的值是 所有iterable中的promsie回调的值的数组集合。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> promise6 = <span class="built_in">Promise</span>.resolve(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">var</span> promise7 = <span class="number">22</span></span><br><span class="line"><span class="keyword">var</span> promise8 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">    setTimeout(resolve,<span class="number">100</span>,<span class="string">'foo'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">Promise</span>.all([promise6,promise7,promise8]).then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value) <span class="comment">//[3,22,'foo']</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Promise实例的then-方法，它最多需要有两个参数：Promise-的成功和失败情况的回调函数。第一个参数是成功回调，第二个是失败的回调。"><a href="#Promise实例的then-方法，它最多需要有两个参数：Promise-的成功和失败情况的回调函数。第一个参数是成功回调，第二个是失败的回调。" class="headerlink" title="Promise实例的then()方法，它最多需要有两个参数：Promise 的成功和失败情况的回调函数。第一个参数是成功回调，第二个是失败的回调。"></a>Promise实例的then()方法，它最多需要有两个参数：Promise 的成功和失败情况的回调函数。第一个参数是成功回调，第二个是失败的回调。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> promise1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  reject(<span class="string">'fail!'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise1.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error)<span class="comment">// fail!</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Promise实例的catch-方法，它只有一个参数：Promise-失败情况的回调函数。"><a href="#Promise实例的catch-方法，它只有一个参数：Promise-失败情况的回调函数。" class="headerlink" title="Promise实例的catch()方法，它只有一个参数：Promise 失败情况的回调函数。"></a>Promise实例的catch()方法，它只有一个参数：Promise 失败情况的回调函数。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> promise1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  reject(<span class="string">'fail!'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise1.catch(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);<span class="comment">// fail!</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- 已经写好的文章在对应的md文件头部添加top：{number}即可 数值越大优先级越高 --&gt;
&lt;h3 id=&quot;以前看见Promise这个东西，不知道怎么用，总是去看别个教程的demo来理解，而且比较复杂的样子，然后似乎是理解，，但是心里面又不踏实，然后等下一次遇到或者
      
    
    </summary>
    
      <category term="js" scheme="wanderfully.club/categories/js/"/>
    
    
      <category term="promise" scheme="wanderfully.club/tags/promise/"/>
    
  </entry>
  
  <entry>
    <title>日记：关于电话号码验证不通过的神秘问题</title>
    <link href="wanderfully.club/2019/06/06/%E6%97%A5%E8%AE%B0%EF%BC%9A%E5%85%B3%E4%BA%8E%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E9%AA%8C%E8%AF%81%E4%B8%8D%E9%80%9A%E8%BF%87%E7%9A%84%E7%A5%9E%E7%A7%98%E9%97%AE%E9%A2%98/"/>
    <id>wanderfully.club/2019/06/06/日记：关于电话号码验证不通过的神秘问题/</id>
    <published>2019-06-06T06:36:14.000Z</published>
    <updated>2019-06-10T01:50:00.322Z</updated>
    
    <content type="html"><![CDATA[<!-- 已经写好的文章在对应的md文件头部添加top：{number}即可 数值越大优先级越高 --><p>那天线上用户反馈，提交信息的时候提示电话号码格式不正确，提交不了，然后自己看了电话号码的格式，确实没问题，觉得很奇怪，明明是正确的，为什么会提交不了呢。然后开始一个一个电话号码开始测试（因为有很多号码），确实发现有一个号码不通过，但是看上去明明是符合规则的，空格什么的也去了，但依然不行，突然在我删除号码的时候发现按第一次删除的时候没有效果，什么都没删到，感觉好像有什么字符看不见又不占位置，于是我把那窜电话号码线上转化成unicode，发现多了一个<strong>\u202c</strong>这个东西，最后验证确实是这个搞的鬼，既看不见，又不占位置。这些总是能搞出些想象不到的问题，厉害了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- 已经写好的文章在对应的md文件头部添加top：{number}即可 数值越大优先级越高 --&gt;
&lt;p&gt;那天线上用户反馈，提交信息的时候提示电话号码格式不正确，提交不了，然后自己看了电话号码的格式，确实没问题，觉得很奇怪，明明是正确的，为什么会提交不了呢。然后开始一个一个
      
    
    </summary>
    
      <category term="日记" scheme="wanderfully.club/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="日记" scheme="wanderfully.club/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>重写radio、checkbox的样式</title>
    <link href="wanderfully.club/2019/06/05/%E9%87%8D%E5%86%99radio%E3%80%81checkbox%E7%9A%84%E6%A0%B7%E5%BC%8F/"/>
    <id>wanderfully.club/2019/06/05/重写radio、checkbox的样式/</id>
    <published>2019-06-05T07:34:32.000Z</published>
    <updated>2019-06-05T07:40:44.941Z</updated>
    
    <content type="html"><![CDATA[<!-- 已经写好的文章在对应的md文件头部添加top：{number}即可 数值越大优先级越高 --><h3 id="往往原生的radio、checkbox的样式不是我们所期望的样式，通常我们都会给它们重写样式。这时我们可以通过伪类：checkbox来实现"><a href="#往往原生的radio、checkbox的样式不是我们所期望的样式，通常我们都会给它们重写样式。这时我们可以通过伪类：checkbox来实现" class="headerlink" title="往往原生的radio、checkbox的样式不是我们所期望的样式，通常我们都会给它们重写样式。这时我们可以通过伪类：checkbox来实现"></a>往往原生的radio、checkbox的样式不是我们所期望的样式，通常我们都会给它们重写样式。这时我们可以通过伪类：checkbox来实现</h3><blockquote><p>1、我们先用label将radio关联起来<br>2、隐藏radio按钮<br>3、通过设置伪元素::before来重写radio样式</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*隐藏radio按钮*/</span></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type="radio"]</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">clip</span>: <span class="built_in">rect</span>(0, 0, 0, 0);</span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">/*默认不选中的样式*/</span></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type="radio"]</span> + <span class="selector-tag">label</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">"\a0"</span>; <span class="comment">/*不换行空格*/</span></span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: .<span class="number">4em</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#01cd78</span>;</span><br><span class="line">    <span class="attribute">text-indent</span>: .<span class="number">15em</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1</span>; </span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">/*选中时的样式*/</span></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type="radio"]</span><span class="selector-pseudo">:checked</span> + <span class="selector-tag">label</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#01cd78</span>;</span><br><span class="line">    <span class="attribute">background-clip</span>: content-box;</span><br><span class="line">    <span class="attribute">padding</span>: .<span class="number">2em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- 已经写好的文章在对应的md文件头部添加top：{number}即可 数值越大优先级越高 --&gt;
&lt;h3 id=&quot;往往原生的radio、checkbox的样式不是我们所期望的样式，通常我们都会给它们重写样式。这时我们可以通过伪类：checkbox来实现&quot;&gt;&lt;a href=
      
    
    </summary>
    
      <category term="css" scheme="wanderfully.club/categories/css/"/>
    
    
      <category term="css" scheme="wanderfully.club/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>es5实现es6的一些方法</title>
    <link href="wanderfully.club/2019/06/04/es5%E5%AE%9E%E7%8E%B0es6%E7%9A%84%E4%B8%80%E4%BA%9B%E6%96%B9%E6%B3%95/"/>
    <id>wanderfully.club/2019/06/04/es5实现es6的一些方法/</id>
    <published>2019-06-04T08:48:13.000Z</published>
    <updated>2019-06-11T08:28:32.776Z</updated>
    
    <content type="html"><![CDATA[<!-- 已经写好的文章在对应的md文件头部添加top：{number}即可 数值越大优先级越高 --><h3 id="对象检测-如-isArray"><a href="#对象检测-如-isArray" class="headerlink" title="对象检测 如 isArray()"></a>对象检测 如 isArray()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//箭头函数方式</span></span><br><span class="line"><span class="keyword">let</span> isType = <span class="function"><span class="params">type</span> =&gt;</span> target =&gt; <span class="string">`[object <span class="subst">$&#123;type&#125;</span>]`</span> === <span class="built_in">Object</span>.prototype.toString.call(target)</span><br><span class="line"><span class="comment">//function方式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isType</span>(<span class="params">type</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`[object <span class="subst">$&#123;type&#125;</span>]`</span> === <span class="built_in">Object</span>.prototype.toString.call(target)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//例1</span></span><br><span class="line"><span class="keyword">let</span> isArray = isType(<span class="string">'Array'</span>)</span><br><span class="line">isArray([])<span class="comment">//true</span></span><br><span class="line"><span class="comment">//例2</span></span><br><span class="line"><span class="keyword">let</span> isString = isType(<span class="string">'String'</span>)</span><br><span class="line">isString(<span class="string">"abc"</span>) <span class="comment">//true</span></span><br><span class="line"><span class="comment">//解析</span></span><br></pre></td></tr></table></figure><blockquote><p>解析：这里是一个闭包，返回一个方法用于比较与自己定义需要检测的类型和传入的值是否是同一类型。<br><strong>isType</strong>可指定类型如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="string">"jerry"</span>));<span class="comment">//[object String]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="number">12</span>));<span class="comment">//[object Number]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="literal">true</span>));<span class="comment">//[object Boolean]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="literal">undefined</span>));<span class="comment">//[object Undefined]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="literal">null</span>));<span class="comment">//[object Null]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(&#123;<span class="attr">name</span>: <span class="string">"jerry"</span>&#125;));<span class="comment">//[object Object]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;));<span class="comment">//[object Function]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call([]));<span class="comment">//[object Array]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">new</span> <span class="built_in">Date</span>));<span class="comment">//[object Date]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="regexp">/\d/</span>));<span class="comment">//[object RegExp]</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">new</span> Person));<span class="comment">//[object Object]</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="es5、reduce实现map方法"><a href="#es5、reduce实现map方法" class="headerlink" title="es5、reduce实现map方法"></a>es5、reduce实现map方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//es5实现</span></span><br><span class="line"><span class="keyword">let</span> selfMap = <span class="function"><span class="keyword">function</span>(<span class="params">fn,context</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = <span class="built_in">Array</span>.prototype.slice.call(<span class="keyword">this</span>);<span class="comment">//这一步的this是被循环的数组，相当于 this.slice()等于原数组 , arr接收需要循环的数组</span></span><br><span class="line">    <span class="keyword">let</span> tempArr = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!arr.hasOwnProperty(i))&#123;</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        tempArr.push(fn.call(context,arr[i],i,arr));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tempArr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//reduce实现</span></span><br><span class="line"><span class="keyword">let</span> selfMap = <span class="function"><span class="keyword">function</span>(<span class="params">fn,context</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = <span class="built_in">Array</span>.prototype.slice.call(<span class="keyword">this</span>)</span><br><span class="line">    <span class="keyword">return</span> arr.reduce(<span class="function">(<span class="params">pre,cur,index</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//pre是上一次累积，每次将fn的计算结果累计到pre返回</span></span><br><span class="line">        <span class="keyword">return</span> [...pre, fn.call(context, cur, index, <span class="keyword">this</span>)]</span><br><span class="line">    &#125;,[])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.prototype.selfMap = selfMap || </span><br><span class="line"><span class="built_in">Object</span>.defineProperty(<span class="built_in">Array</span>.prototype,<span class="string">"selfMap"</span>,&#123;</span><br><span class="line">    value: selfMap,</span><br><span class="line">    enumerable: <span class="literal">false</span>,</span><br><span class="line">    configurable: <span class="literal">false</span>,</span><br><span class="line">    writable: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> data = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>];</span><br><span class="line">data.selfMap(<span class="function"><span class="keyword">function</span>(<span class="params">item,index</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>)<span class="comment">//["77","88"]</span></span><br><span class="line">    <span class="built_in">console</span>.log(item)</span><br><span class="line">&#125;,[<span class="string">"77"</span>,<span class="string">"88"</span>])</span><br></pre></td></tr></table></figure><h3 id="es5、reduce实现filter方法"><a href="#es5、reduce实现filter方法" class="headerlink" title="es5、reduce实现filter方法"></a>es5、reduce实现filter方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//es5实现</span></span><br><span class="line"><span class="keyword">let</span> selfFilter = <span class="function"><span class="keyword">function</span>(<span class="params">fn,context</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = <span class="built_in">Array</span>.prototype.slice.call(<span class="keyword">this</span>)</span><br><span class="line">    <span class="keyword">let</span> tempFilter = []</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!arr.hasOwnproperty(i))&#123;</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        fn.call(context,arr[i],i,arr) &amp;&amp; tempFilter.push(arr[i])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tempFilter</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//reduce实现</span></span><br><span class="line"><span class="keyword">let</span> selfFiletr1 = <span class="function"><span class="keyword">function</span>(<span class="params">fn,context</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.reduce(<span class="function">(<span class="params">pre,cur,index</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//如果满足条件 就放入进累计数组</span></span><br><span class="line">        <span class="keyword">return</span> fn.call(context,cur,index,<span class="keyword">this</span>) ? [...pre,fn.call(context,cur,index,<span class="keyword">this</span>)] : [...pre]</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="es5实现some、every方法"><a href="#es5实现some、every方法" class="headerlink" title="es5实现some、every方法"></a>es5实现some、every方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//some</span></span><br><span class="line"><span class="keyword">let</span> selfSome = <span class="function"><span class="keyword">function</span>(<span class="params">fn,context</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = <span class="built_in">Array</span>.prototype.slice.call(<span class="keyword">this</span>)</span><br><span class="line">    <span class="keyword">if</span>(!arr.length) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!arr.hasOwnproperty(i))&#123;</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//只要有一个满足条件 就返回true</span></span><br><span class="line">        <span class="keyword">if</span>(fn.call(context,arr[i],i,arr))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//every</span></span><br><span class="line"><span class="keyword">let</span> selfEvery = <span class="function"><span class="keyword">function</span>(<span class="params">fn,context</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = <span class="built_in">Array</span>.prototype.slice.call(<span class="keyword">this</span>)</span><br><span class="line">    <span class="keyword">if</span>(!arr.length) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!arr.hasOwnproperty(i))&#123;</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!fn.call(context,arr[i],i,arr))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="es5实现reduce方法"><a href="#es5实现reduce方法" class="headerlink" title="es5实现reduce方法"></a>es5实现reduce方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> selfReduce = <span class="function"><span class="keyword">function</span>(<span class="params">fn,initValue</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = <span class="built_in">Array</span>.prototype.slice.call(<span class="keyword">this</span>)</span><br><span class="line">    <span class="keyword">let</span> res,startIndex;</span><br><span class="line">    <span class="keyword">if</span>(initValue == <span class="literal">undefined</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!arr.hasOwnproperty(i))&#123;</span><br><span class="line">                res = arr[i];</span><br><span class="line">                startIndex = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        res = initValue; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = ++startIndex || <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!arr.hasOwnproperty(i))&#123;</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        res = fn.call(<span class="literal">null</span>,res,arr[i],i,<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="reduce实现数组的flat方法（展开任意深度的数组）"><a href="#reduce实现数组的flat方法（展开任意深度的数组）" class="headerlink" title="reduce实现数组的flat方法（展开任意深度的数组）"></a>reduce实现数组的flat方法（展开任意深度的数组）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> selfFlat = <span class="function"><span class="keyword">function</span>(<span class="params">deep = <span class="number">1</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(deep == <span class="number">0</span>) <span class="keyword">return</span> arr</span><br><span class="line">    <span class="keyword">return</span> arr.reduce(<span class="function">(<span class="params">res,cur</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">Array</span>.isArray(cur))&#123;</span><br><span class="line">            <span class="keyword">return</span> [...pre,...selfFlat.call(cur,deep - <span class="number">1</span>)]</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> [...pre,cur]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,[])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数柯里化"><a href="#函数柯里化" class="headerlink" title="函数柯里化"></a>函数柯里化</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curry</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(fn.length &lt;= <span class="number">1</span>) <span class="keyword">return</span> fn</span><br><span class="line">    <span class="keyword">const</span> generator = <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(fn.length === args.length)&#123;</span><br><span class="line">            <span class="keyword">return</span> fn(...args)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="function">(<span class="params">...args2</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> generator(...args,...args2)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> generator</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> add = <span class="function">(<span class="params">a,b,c,d</span>) =&gt;</span> a + b + c + d</span><br><span class="line"><span class="keyword">const</span> curriedAdd = curry(add)</span><br><span class="line">curriedAdd(<span class="number">5</span>)(<span class="number">6</span>)(<span class="number">7</span>)(<span class="number">8</span>)</span><br></pre></td></tr></table></figure><h3 id="实现函数的call方法"><a href="#实现函数的call方法" class="headerlink" title="实现函数的call方法"></a>实现函数的call方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> selfCall = <span class="function"><span class="keyword">function</span>(<span class="params">context,...args</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> func = <span class="keyword">this</span></span><br><span class="line">    context || (context = <span class="built_in">window</span>)</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> func !== <span class="string">'function'</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'this is not function'</span>)</span><br><span class="line">    <span class="keyword">let</span> caller = <span class="built_in">Symbol</span>(<span class="string">'caller'</span>)</span><br><span class="line">    context[caller] = func</span><br><span class="line">    <span class="keyword">let</span> res = context[caller](...args)</span><br><span class="line">    <span class="keyword">delete</span> context[caller]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Function</span>.prototype.selfCall || (<span class="built_in">Object</span>.defineProperty(<span class="built_in">Function</span>.prototype,<span class="string">'selfCall'</span>,&#123;</span><br><span class="line">    value:selfCall,</span><br><span class="line">    enumerable:<span class="literal">false</span>,</span><br><span class="line">    configurable:<span class="literal">true</span>,</span><br><span class="line">    writable:<span class="literal">true</span></span><br><span class="line">&#125;))</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a+b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> example2 = &#123; <span class="attr">a</span>:<span class="number">1</span>&#125;</span><br><span class="line">func.selfCall(example2,<span class="number">1</span>,<span class="number">6</span>)</span><br></pre></td></tr></table></figure><h3 id="图片懒加载"><a href="#图片懒加载" class="headerlink" title="图片懒加载"></a>图片懒加载</h3><blockquote><p>getBoundingClientRect 实现懒加载<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> imgList = [...document.querySelectorAll(<span class="string">"img"</span>)]</span><br><span class="line"><span class="keyword">let</span> num = imgList.length</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> lazyLoad1 = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> deleteIndexList = []</span><br><span class="line">        imgList.forEach(<span class="function">(<span class="params">img,index</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> rect = img.getBoundingClientRect()</span><br><span class="line">            <span class="keyword">if</span>(rect.top &lt; <span class="built_in">window</span>.innerHeight)&#123;</span><br><span class="line">                img.src = img.dataset.src</span><br><span class="line">                <span class="comment">// 加载成功后将图片添加到删除列表中</span></span><br><span class="line">                deleteIndexList.push(index)</span><br><span class="line">                count++</span><br><span class="line">                <span class="keyword">if</span>(count === num)&#123;</span><br><span class="line">                    <span class="comment">//当图片全部加载完毕解绑scroll事件</span></span><br><span class="line">                    <span class="built_in">document</span>.removeEventListener(<span class="string">'scroll'</span>,lazyLoad1)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// 删除已经加载完毕的图片</span></span><br><span class="line">        imgList = imgList.filter(<span class="function">(<span class="params">_,index</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> !deleteIndexList.includes(index)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"><span class="comment">// 这里引用了 throttle.js 的节流函数</span></span><br><span class="line"><span class="comment">// lazyLoad1 = proxy(lazyLoad1, 100)</span></span><br><span class="line"><span class="comment">// document.addEventListener('scroll', lazyLoad1)</span></span><br><span class="line"><span class="comment">// // 手动加载一次，否则首屏的图片不触发滚动无法加载</span></span><br><span class="line"><span class="comment">// lazyLoad1()</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>intersectionObserver 实现懒加载<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> imgList2 = [...document.querySelectorAll(<span class="string">"img"</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> lazyLoad2 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 实例化observer</span></span><br><span class="line">    <span class="keyword">let</span> observer = <span class="keyword">new</span> IntersectionObserver(<span class="function"><span class="params">entries</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//entries存储着所有观察被元素的intersectionObserverEntry配置</span></span><br><span class="line">        entries.forEach(<span class="function"><span class="params">entry</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 大于0表示进入视口</span></span><br><span class="line">            <span class="keyword">if</span> (entry.intersectionRatio &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                entry.target.src = entry.target.dataset.src</span><br><span class="line">                <span class="comment">//取消观察</span></span><br><span class="line">                observer.unobserve(entry.target)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    imgList2.forEach(<span class="function"><span class="params">img</span> =&gt;</span> &#123;</span><br><span class="line">        observer.observe(img)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">lazyLoad2()</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="new-关键字"><a href="#new-关键字" class="headerlink" title="new 关键字"></a>new 关键字</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isComplexDataType = <span class="function"><span class="params">obj</span> =&gt;</span>&#123;</span><br><span class="line">    (<span class="keyword">typeof</span> obj === <span class="string">'object'</span> || <span class="keyword">typeof</span> obj === <span class="string">'function'</span>) &amp;&amp; obj !== <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> selfNew = <span class="function"><span class="keyword">function</span>(<span class="params">fn,...rest</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> instance = <span class="built_in">Object</span>.create(fn.prototype)</span><br><span class="line">    <span class="keyword">let</span> res = fn.call(instance,...rest)</span><br><span class="line">    <span class="keyword">return</span> isComplexDataType(res) ? res : instance</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, sex</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.sex = sex</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newPerson = <span class="keyword">new</span> Person(<span class="string">'zhl'</span>, <span class="string">'male'</span>)</span><br><span class="line"><span class="keyword">let</span> selfNewPerson = selfNew(Person, <span class="string">'zhl'</span>, <span class="string">'male'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(newPerson)</span><br><span class="line"><span class="built_in">console</span>.log(selfNewPerson)</span><br></pre></td></tr></table></figure><h3 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h3><blockquote><p>递归遍历 right 参数的原型链，每次和 left 参数作比较，遍历到原型链终点时则返回 false，找到则返回 true<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> selfInstaceof = <span class="function"><span class="keyword">function</span>(<span class="params">left,right</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> proto = <span class="built_in">Object</span>.getPrototypeOf(left)</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(proto == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(proto === right.prototype)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        proto = <span class="built_in">Object</span>.getPrototypeOf(proto)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- 已经写好的文章在对应的md文件头部添加top：{number}即可 数值越大优先级越高 --&gt;
&lt;h3 id=&quot;对象检测-如-isArray&quot;&gt;&lt;a href=&quot;#对象检测-如-isArray&quot; class=&quot;headerlink&quot; title=&quot;对象检测 如 isAr
      
    
    </summary>
    
      <category term="js" scheme="wanderfully.club/categories/js/"/>
    
    
      <category term="js" scheme="wanderfully.club/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>正则记忆</title>
    <link href="wanderfully.club/2019/05/30/%E6%AD%A3%E5%88%99%E8%AE%B0%E5%BF%86/"/>
    <id>wanderfully.club/2019/05/30/正则记忆/</id>
    <published>2019-05-30T09:52:31.000Z</published>
    <updated>2019-05-31T09:35:07.302Z</updated>
    
    <content type="html"><![CDATA[<!-- 已经写好的文章在对应的md文件头部添加top：{number}即可 数值越大优先级越高 --><h3 id="正则可视化检测"><a href="#正则可视化检测" class="headerlink" title="正则可视化检测"></a>正则可视化检测</h3><p><a href="https://regexper.com/" title="正则" target="_blank" rel="noopener">regexper.com</a></p><h3 id="正则与单词相记忆"><a href="#正则与单词相记忆" class="headerlink" title="正则与单词相记忆"></a>正则与单词相记忆</h3><table><thead><tr><th>符号</th><th style="text-align:center">描述</th><th style="text-align:right">记忆方式</th></tr></thead><tbody><tr><td>.</td><td style="text-align:center">任意单个字符，换行符除外</td><td style="text-align:right">句号</td></tr><tr><td>\w</td><td style="text-align:center">任意一个字母数字或下划线，0-9a-zA-Z</td><td style="text-align:right"><strong>w</strong>ord</td></tr><tr><td>\W</td><td style="text-align:center">查找非单次的字符等价于[^A-Za-z0-9]</td><td style="text-align:right"><strong>n</strong>ot word</td></tr><tr><td>\d</td><td style="text-align:center">匹配一个数字字符，等价于[0-9]</td><td style="text-align:right"><strong>d</strong>igit</td></tr><tr><td>\D</td><td style="text-align:center">匹配不是数字字符的，等价于[^0-9]</td><td style="text-align:right"><strong>n</strong>ot digit</td></tr><tr><td>\s</td><td style="text-align:center">匹配任何空白字符，等价于[\f\n\r\t\v]</td><td style="text-align:right"><strong>s</strong>pace</td></tr><tr><td>\S</td><td style="text-align:center">匹配任何非空白字符，等价于[^\f\n\r\t\v]</td><td style="text-align:right"><strong>n</strong>ot space</td></tr><tr><td>\b</td><td style="text-align:center">匹配一个单词边界，比如’er\b’可以匹配”never”中的”er”,但是不能匹配”verb”中的”er”</td><td style="text-align:right"><strong>b</strong>oundary</td></tr><tr><td>\B</td><td style="text-align:center">匹配一个非单词边界,’er\B’能匹配’verb’中的’er’,但不能匹配’never’中的’er’</td><td style="text-align:right"><strong>not b</strong>oundary</td></tr><tr><td>\0</td><td style="text-align:center">匹配非单词边界,’er\查找NUL字符</td><td style="text-align:right"></td></tr><tr><td>\n</td><td style="text-align:center">换行符</td><td style="text-align:right"><strong>n</strong>ew line</td></tr><tr><td>\f</td><td style="text-align:center">换页符</td><td style="text-align:right"><strong>f</strong>orm feed</td></tr><tr><td>\r</td><td style="text-align:center">回车符</td><td style="text-align:right"><strong>r</strong>eturn</td></tr><tr><td>\t</td><td style="text-align:center">制表符</td><td style="text-align:right"><strong>t</strong>ab</td></tr><tr><td>\v</td><td style="text-align:center">垂直制表符</td><td style="text-align:right"><strong>v</strong>ertical tab</td></tr><tr><td>\xxx</td><td style="text-align:center">以八进制数xxx规定的字符</td><td style="text-align:right"></td></tr><tr><td>\xdd</td><td style="text-align:center">查找以16进制数dd规定的字符</td><td style="text-align:right"></td></tr><tr><td>\uxxxx</td><td style="text-align:center">以16进制数的xxxx规定的Unicode字符</td><td style="text-align:right"></td></tr></tbody></table><h3 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h3><p>用于限定子模式趁现在正则表达式中的次数</p><table><thead><tr><th>符号</th><th>描述</th></tr></thead><tbody><tr><td>+</td><td>匹配一次或多次，相当于{1,}</td></tr><tr><td>*</td><td>匹配零次或多次 ，相当于{0,}</td></tr><tr><td>?</td><td>匹配零次或一次 ，相当于{0,1}</td></tr><tr><td>{n}</td><td>匹配n次</td></tr><tr><td>{n,m}</td><td>匹配至少n个，最多m个某某的字符串</td></tr><tr><td>{n}</td><td>匹配至少n个某字符串</td></tr></tbody></table><h3 id="位置符号"><a href="#位置符号" class="headerlink" title="位置符号"></a>位置符号</h3><table><thead><tr><th>符号</th><th>描述</th></tr></thead><tbody><tr><td>$</td><td>结束符号，以什么结尾</td></tr><tr><td>^</td><td>起始符号，以什么开始</td></tr><tr><td>?=</td><td>肯定正向环视,例：?=n,匹配其后紧接指定的n字符串</td></tr><tr><td>?!</td><td>否定正向环视,例如：?!n,匹配其后没有紧接指定的n字符串</td></tr><tr><td>?:</td><td>表示不匹配</td></tr></tbody></table><h3 id="正则表达式中的-和-和-的理解"><a href="#正则表达式中的-和-和-的理解" class="headerlink" title="正则表达式中的 ?= 和 ?: 和 ?! 的理解"></a>正则表达式中的 ?= 和 ?: 和 ?! 的理解</h3><h4 id="零宽正向断言："><a href="#零宽正向断言：" class="headerlink" title="零宽正向断言："></a>零宽正向断言：</h4><blockquote><p>exp1(?=exp2)   括号内表示某个位置右边必须和=右边匹配上</p></blockquote><h4 id="负向断言"><a href="#负向断言" class="headerlink" title="负向断言"></a>负向断言</h4><blockquote><p>exp1(?!exp2) 括号内表示某个位置右边不和!后的字符匹配</p></blockquote><h4 id="后顾："><a href="#后顾：" class="headerlink" title="后顾："></a>后顾：</h4><blockquote><p>(?&lt;=exp2&gt;)exp1 查找exp2后面的exp1</p></blockquote><h4 id="负后顾："><a href="#负后顾：" class="headerlink" title="负后顾："></a>负后顾：</h4><blockquote><p>(?!&lt;=exp2)exp1 查找前面不是exp2的exp1</p></blockquote><p>例子：</p><blockquote><p>“中国人”.replace(/(?&lt;=中国)人/, “rr”)  // 匹配中国人中的人，将其替换为rr，结果为 中国rr</p></blockquote><blockquote><p>“法国人”.replace(/(?&lt;=中国)人/, “rr”) // 结果为 法国人，因为人前面不是中国，所以无法匹配到</p></blockquote><h4 id="要理解-则需要理解捕获分组和非捕获分组的概念："><a href="#要理解-则需要理解捕获分组和非捕获分组的概念：" class="headerlink" title="要理解?:则需要理解捕获分组和非捕获分组的概念："></a>要理解?:则需要理解捕获分组和非捕获分组的概念：</h4><p>()表示捕获分组，()会把每个分组里的匹配的值保存起来，使用$n(n是一个数字，表示第n个捕获组的内容)</p><p>(?:)表示非捕获分组，和捕获分组唯一的区别在于，非捕获分组匹配的值不会保存起来</p><p>举例：</p><blockquote><p>// 数字格式化 1,123,000</p></blockquote><blockquote><p>“1234567890”.replace(/\B(?=(?:\d{3})+(?!\d))/g,”,”) // 结果：1,234,567,890，匹配的是后面是3*n个数字的非单词边界(\B) </p></blockquote><h3 id="match：-stringObject-match-regxp-match返回的一个数组，第一个元素是整体匹配结果，然后是各个分组（括号里）匹配的内容，然后是匹配下标，最后是输入的文本。（注意：如果正则是否有修饰符g，match返回的数组格式是不一样的）"><a href="#match：-stringObject-match-regxp-match返回的一个数组，第一个元素是整体匹配结果，然后是各个分组（括号里）匹配的内容，然后是匹配下标，最后是输入的文本。（注意：如果正则是否有修饰符g，match返回的数组格式是不一样的）" class="headerlink" title="match：    stringObject.match(regxp) match返回的一个数组，第一个元素是整体匹配结果，然后是各个分组（括号里）匹配的内容，然后是匹配下标，最后是输入的文本。（注意：如果正则是否有修饰符g，match返回的数组格式是不一样的）"></a>match：    stringObject.match(regxp) match返回的一个数组，第一个元素是整体匹配结果，然后是各个分组（括号里）匹配的内容，然后是匹配下标，最后是输入的文本。（注意：如果正则是否有修饰符g，match返回的数组格式是不一样的）</h3><p>例：</p><blockquote><p>console.log(‘30CACDVB0040’.match(/(\d{1,2})/g)); // [“30”,”00”,”40”]</p></blockquote><h3 id="exec：-regex-exec-sring"><a href="#exec：-regex-exec-sring" class="headerlink" title="exec： regex.exec(sring)"></a>exec： regex.exec(sring)</h3><h3 id="replace：-str-repace-regxp-”替换成何值”-g-全局替换（global）-i-忽略大小写（ignore忽略）"><a href="#replace：-str-repace-regxp-”替换成何值”-g-全局替换（global）-i-忽略大小写（ignore忽略）" class="headerlink" title="replace： str.repace(regxp,”替换成何值”)  /g 全局替换（global）   /i 忽略大小写（ignore忽略）"></a>replace： str.repace(regxp,”替换成何值”)  /g 全局替换（global）   /i 忽略大小写（ignore忽略）</h3><p>例：</p><blockquote><p>var str =’学 习 正 则’;<br>console.log(str.replace(/\s+/g,’?’)); // 学?习?正?则</p></blockquote><h3 id="test：-验证字符窜是否符合该正则表达式"><a href="#test：-验证字符窜是否符合该正则表达式" class="headerlink" title="test：  验证字符窜是否符合该正则表达式"></a>test：  验证字符窜是否符合该正则表达式</h3><p>例：</p><blockquote><p>var str =’学 习 正 则’;<br>console.log(/^\d<em>$/g.test(‘123789’)); // true<br>console.log(/^\d</em>$/g.test(‘12378b9’)); // false</p></blockquote><h3 id="反向引用-对分组-可以进行引用-1：表示引用第一个分组-2：表示引用第二个-依次类推"><a href="#反向引用-对分组-可以进行引用-1：表示引用第一个分组-2：表示引用第二个-依次类推" class="headerlink" title="反向引用 对分组 可以进行引用 \1：表示引用第一个分组 \2：表示引用第二个 依次类推"></a>反向引用 对分组 可以进行引用 \1：表示引用第一个分组 \2：表示引用第二个 依次类推</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- 已经写好的文章在对应的md文件头部添加top：{number}即可 数值越大优先级越高 --&gt;
&lt;h3 id=&quot;正则可视化检测&quot;&gt;&lt;a href=&quot;#正则可视化检测&quot; class=&quot;headerlink&quot; title=&quot;正则可视化检测&quot;&gt;&lt;/a&gt;正则可视化检测&lt;/h3&gt;
      
    
    </summary>
    
      <category term="正则" scheme="wanderfully.club/categories/%E6%AD%A3%E5%88%99/"/>
    
    
      <category term="正则" scheme="wanderfully.club/tags/%E6%AD%A3%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>常用正则</title>
    <link href="wanderfully.club/2019/05/28/%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99/"/>
    <id>wanderfully.club/2019/05/28/常用正则/</id>
    <published>2019-05-28T02:04:55.000Z</published>
    <updated>2019-05-31T06:32:10.408Z</updated>
    
    <content type="html"><![CDATA[<!-- 已经写好的文章在对应的md文件头部添加top：{number}即可 数值越大优先级越高 --><h3 id="邮箱"><a href="#邮箱" class="headerlink" title="邮箱"></a>邮箱</h3><blockquote><p>/^(\w)+@(\w)+(.[A-Za-z]{2,3}){1,3}$/</p></blockquote><h3 id="中文"><a href="#中文" class="headerlink" title="中文"></a>中文</h3><blockquote><p>/^[\u4E00-\u9FA5]{0,}$/</p></blockquote><p>### </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- 已经写好的文章在对应的md文件头部添加top：{number}即可 数值越大优先级越高 --&gt;
&lt;h3 id=&quot;邮箱&quot;&gt;&lt;a href=&quot;#邮箱&quot; class=&quot;headerlink&quot; title=&quot;邮箱&quot;&gt;&lt;/a&gt;邮箱&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;/^(\
      
    
    </summary>
    
      <category term="正则" scheme="wanderfully.club/categories/%E6%AD%A3%E5%88%99/"/>
    
    
      <category term="正则" scheme="wanderfully.club/tags/%E6%AD%A3%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>js常用API</title>
    <link href="wanderfully.club/2019/05/27/js%E5%B8%B8%E7%94%A8API/"/>
    <id>wanderfully.club/2019/05/27/js常用API/</id>
    <published>2019-05-27T10:50:49.000Z</published>
    <updated>2019-09-29T03:56:50.352Z</updated>
    
    <content type="html"><![CDATA[<!-- 已经写好的文章在对应的md文件头部添加top：{number}即可 数值越大优先级越高 --><h3 id="cookie的获取、设置、删除"><a href="#cookie的获取、设置、删除" class="headerlink" title="cookie的获取、设置、删除"></a>cookie的获取、设置、删除</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">cookies: &#123;</span><br><span class="line">  <span class="comment">//获取</span></span><br><span class="line">  <span class="keyword">get</span>(name) &#123;</span><br><span class="line">    <span class="keyword">let</span> arr, reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(^| )"</span> + name + <span class="string">"=([^;]*)(;|$)"</span>);</span><br><span class="line">    <span class="keyword">if</span> (arr = <span class="built_in">document</span>.cookie.match(reg))</span><br><span class="line">      <span class="keyword">return</span> (arr[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 设置cookie</span></span><br><span class="line"><span class="comment">   * @param c_name 名称</span></span><br><span class="line"><span class="comment">   * @param value  值</span></span><br><span class="line"><span class="comment">   * @param time   时间，s30=30秒，h12=12小时，d7=7天</span></span><br><span class="line"><span class="comment">   * @param path   路径，默认 根 /</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">set</span>(c_name, value, time, path = '/') &#123;</span><br><span class="line">    <span class="keyword">let</span> exp = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">let</span> strSec = getSec(time);</span><br><span class="line">    exp.setTime(exp.getTime() + strSec * <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">document</span>.cookie = c_name + <span class="string">"="</span> + <span class="built_in">escape</span>(value) + (!time ? <span class="string">""</span> : <span class="string">";expires="</span> + exp.toGMTString()) + <span class="string">';path='</span> + path;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getSec</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">let</span> str1 = str.substring(<span class="number">1</span>, str.length) * <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">let</span> str2 = str.substring(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">if</span> (str2 === <span class="string">"s"</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> str1 * <span class="number">1000</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (str2 === <span class="string">"h"</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> str1 * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (str2 === <span class="string">"d"</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> str1 * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//删除</span></span><br><span class="line">  del(name) &#123;</span><br><span class="line">    <span class="keyword">let</span> exp = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    exp.setTime(exp.getTime() - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">let</span> cval = <span class="keyword">this</span>.get(name);</span><br><span class="line">    <span class="keyword">if</span> (cval != <span class="literal">null</span>)</span><br><span class="line">      <span class="built_in">document</span>.cookie = name + <span class="string">"="</span> + cval + <span class="string">";expires="</span> + exp.toGMTString();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="清除空格"><a href="#清除空格" class="headerlink" title="清除空格"></a>清除空格</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">clearBank(txt) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span>  txt === <span class="string">'string'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> txt.replace(<span class="regexp">/\s/g</span>, <span class="string">''</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'请输入正确的类型'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="解码html"><a href="#解码html" class="headerlink" title="解码html"></a>解码html</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">htmlDecode(html) &#123;</span><br><span class="line">    <span class="keyword">return</span> html.replace(<span class="regexp">/(\&amp;|\&amp;)gt;/g</span>, <span class="string">"&gt;"</span>)</span><br><span class="line">        .replace(<span class="regexp">/(\&amp;|\&amp;)lt;/g</span>, <span class="string">"&lt;"</span>)</span><br><span class="line">        .replace(<span class="regexp">/(\&amp;|\&amp;)quot;/g</span>, <span class="string">"\""</span>);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="转译特殊字符"><a href="#转译特殊字符" class="headerlink" title="转译特殊字符"></a>转译特殊字符</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">escape</span>(str) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty(str)) &#123;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">  &#125;</span><br><span class="line">  str = str.replace(<span class="regexp">/&amp;lt;/g</span>, <span class="string">"&lt;"</span>);</span><br><span class="line">  str = str.replace(<span class="regexp">/&amp;gt;/g</span>, <span class="string">"&gt;"</span>);</span><br><span class="line">  str = str.replace(<span class="regexp">/&amp;acute;/g</span>, <span class="string">"'"</span>);</span><br><span class="line">  str = str.replace(<span class="regexp">/&amp;#45;&amp;#45;/g</span>, <span class="string">"--"</span>);</span><br><span class="line">  str = str.replace(<span class="regexp">/&amp;lt;/g</span>, <span class="string">"&lt;"</span>);</span><br><span class="line">  str = str.replace(<span class="regexp">/&amp;lt;/g</span>, <span class="string">"&lt;"</span>);</span><br><span class="line">  str = str.replace(<span class="regexp">/&amp;quot;/g</span>, <span class="string">'\"'</span>);</span><br><span class="line">  str = str.replace(<span class="regexp">/&amp;acute;/g</span>, <span class="string">"\'"</span>);</span><br><span class="line">  <span class="keyword">return</span> str;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="判断登录设备是PC还是手机"><a href="#判断登录设备是PC还是手机" class="headerlink" title="判断登录设备是PC还是手机"></a>判断登录设备是PC还是手机</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">isPc() &#123;</span><br><span class="line">    <span class="keyword">let</span> userAgentInfo = navigator.userAgent;</span><br><span class="line">    <span class="keyword">let</span> Agents = [<span class="string">"Android"</span>, <span class="string">"iPhone"</span>, <span class="string">"SymbianOS"</span>, <span class="string">"Windows Phone"</span>, <span class="string">"iPad"</span>, <span class="string">"iPod"</span>];  <span class="comment">//判断用户代理头信息</span></span><br><span class="line">    <span class="keyword">let</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> v = <span class="number">0</span>; v &lt; Agents.length; v++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (userAgentInfo.indexOf(Agents[v]) !== <span class="number">-1</span>) &#123;</span><br><span class="line">        flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;   <span class="comment">//true为pc端，false为非pc端</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="清除localstorage时-指定不清除的项"><a href="#清除localstorage时-指定不清除的项" class="headerlink" title="清除localstorage时 指定不清除的项 []"></a>清除localstorage时 指定不清除的项 []</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">clearStorage(storeKeyArr) &#123;</span><br><span class="line">    <span class="keyword">let</span> store = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(localStorage));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> store)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!storeKeyArr.includes(key))&#123;</span><br><span class="line">        localStorage.removeItem(key)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对JSON根据某一对象的属性进行排序"><a href="#对JSON根据某一对象的属性进行排序" class="headerlink" title="对JSON根据某一对象的属性进行排序"></a>对JSON根据某一对象的属性进行排序</h3><p>json：JSON数组  attr：排序依据属性  type：默认从高到低<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">orderby(json, attr, type) &#123;</span><br><span class="line">  <span class="keyword">return</span> json.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> value1 = a[attr];</span><br><span class="line">    <span class="keyword">let</span> value2 = b[attr];</span><br><span class="line">    <span class="keyword">return</span> type === <span class="string">"down"</span> ? value1 - value2 : value2 - value1;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><h3 id="时间格式化"><a href="#时间格式化" class="headerlink" title="时间格式化"></a>时间格式化</h3><p>fmt：格式  obj：Date对象 （yyyy-MM-dd hh:mm:ss.S）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">dateFormat(fmt, obj) &#123; <span class="comment">// author: meizz</span></span><br><span class="line">  <span class="keyword">let</span> o = &#123;</span><br><span class="line">    <span class="string">"M+"</span>: obj.getMonth() + <span class="number">1</span>, <span class="comment">// 月份</span></span><br><span class="line">    <span class="string">"d+"</span>: obj.getDate(), <span class="comment">// 日</span></span><br><span class="line">    <span class="string">"h+"</span>: obj.getHours(), <span class="comment">// 小时</span></span><br><span class="line">    <span class="string">"m+"</span>: obj.getMinutes(), <span class="comment">// 分</span></span><br><span class="line">    <span class="string">"s+"</span>: obj.getSeconds(), <span class="comment">// 秒</span></span><br><span class="line">    <span class="string">"q+"</span>: <span class="built_in">Math</span>.floor((obj.getMonth() + <span class="number">3</span>) / <span class="number">3</span>), <span class="comment">// 季度</span></span><br><span class="line">    <span class="string">"S"</span>: obj.getMilliseconds(),</span><br><span class="line">    <span class="comment">// 毫秒</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">if</span> (<span class="regexp">/(y+)/</span>.test(fmt)) &#123;</span><br><span class="line">    fmt = fmt.replace(<span class="built_in">RegExp</span>.$<span class="number">1</span>, (obj.getFullYear() + <span class="string">""</span>).substr(<span class="number">4</span> - <span class="built_in">RegExp</span>.$<span class="number">1.</span>length));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> o) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"("</span> + k + <span class="string">")"</span>).test(fmt)) &#123;</span><br><span class="line">      fmt = fmt.replace(<span class="built_in">RegExp</span>.$<span class="number">1</span>, (<span class="built_in">RegExp</span>.$<span class="number">1.</span>length == <span class="number">1</span>) ? (o[k]) : ((<span class="string">"00"</span> + o[k]).substr((<span class="string">""</span> + o[k]).length)));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> fmt;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><h3 id="获取指定日期的前几天或后几天"><a href="#获取指定日期的前几天或后几天" class="headerlink" title="获取指定日期的前几天或后几天"></a>获取指定日期的前几天或后几天</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">getThatDate(date, num) &#123;</span><br><span class="line">    <span class="keyword">let</span> trans_day = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">let</span> cur_date = <span class="keyword">new</span> <span class="built_in">Date</span>(date);</span><br><span class="line">    <span class="keyword">let</span> cur_year = <span class="keyword">new</span> <span class="built_in">Date</span>(date).getFullYear();</span><br><span class="line">    <span class="keyword">let</span> cur_month = cur_date.getMonth() + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> real_date = cur_date.getDate();</span><br><span class="line">    cur_month = cur_month &gt; <span class="number">9</span> ? cur_month : (<span class="string">"0"</span> + cur_month);</span><br><span class="line">    real_date = real_date &gt; <span class="number">9</span> ? real_date : (<span class="string">"0"</span> + real_date);</span><br><span class="line">    <span class="keyword">let</span> eT = cur_year + <span class="string">"-"</span> + cur_month + <span class="string">"-"</span> + real_date;</span><br><span class="line">    trans_day = <span class="keyword">this</span>.transDate(eT, num);</span><br><span class="line">    <span class="keyword">return</span> trans_day;</span><br><span class="line">&#125;,</span><br><span class="line">transDate(dateParameter, num) &#123;</span><br><span class="line">    <span class="keyword">let</span> translateDate = <span class="string">""</span>,</span><br><span class="line">        dateString = <span class="string">""</span>,</span><br><span class="line">        monthString = <span class="string">""</span>,</span><br><span class="line">        dayString = <span class="string">""</span>;</span><br><span class="line">    translateDate = dateParameter.replace(<span class="string">"-"</span>, <span class="string">"/"</span>).replace(<span class="string">"-"</span>, <span class="string">"/"</span>);</span><br><span class="line">    <span class="keyword">let</span> newDate = <span class="keyword">new</span> <span class="built_in">Date</span>(translateDate);</span><br><span class="line">    newDate = newDate.valueOf();</span><br><span class="line">    newDate = newDate + num * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line">    newDate = <span class="keyword">new</span> <span class="built_in">Date</span>(newDate);</span><br><span class="line">    <span class="keyword">if</span> ((newDate.getMonth() + <span class="number">1</span>).toString().length === <span class="number">1</span>) &#123;</span><br><span class="line">        monthString = <span class="number">0</span> + <span class="string">""</span> + (newDate.getMonth() + <span class="number">1</span>).toString();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        monthString = (newDate.getMonth() + <span class="number">1</span>).toString();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (newDate.getDate().toString().length === <span class="number">1</span>) &#123;</span><br><span class="line">        dayString = <span class="number">0</span> + <span class="string">""</span> + newDate.getDate().toString();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        dayString = newDate.getDate().toString();</span><br><span class="line">    &#125;</span><br><span class="line">    dateString = newDate.getFullYear() + <span class="string">"-"</span> + monthString + <span class="string">"-"</span> + dayString;</span><br><span class="line">    <span class="keyword">return</span> dateString;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="根据传入时间计算当前日期所在周的开始日期和结束日期"><a href="#根据传入时间计算当前日期所在周的开始日期和结束日期" class="headerlink" title="根据传入时间计算当前日期所在周的开始日期和结束日期"></a>根据传入时间计算当前日期所在周的开始日期和结束日期</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">getTimeSlot(date) &#123;</span><br><span class="line">  <span class="keyword">let</span> sWeek;  <span class="comment">//开始的星期</span></span><br><span class="line">  <span class="keyword">let</span> eWeek;  <span class="comment">//结束的星期</span></span><br><span class="line">  <span class="keyword">if</span> (date.getDay() === <span class="number">0</span>) &#123;</span><br><span class="line">    sWeek = date.getDay() + <span class="number">6</span>;</span><br><span class="line">    eWeek = date.getDay();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    sWeek = date.getDay() - <span class="number">1</span>;</span><br><span class="line">    eWeek = <span class="number">7</span> - date.getDay();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//获取开始日期</span></span><br><span class="line">  <span class="keyword">let</span> sTime = date.getTime() - sWeek * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>;  <span class="comment">//获取开始星期的时间戳</span></span><br><span class="line">  <span class="keyword">let</span> startDate = <span class="keyword">new</span> <span class="built_in">Date</span>(sTime);  <span class="comment">//转换时间戳</span></span><br><span class="line">  <span class="keyword">let</span> sDate = startDate.getFullYear() + <span class="string">"年"</span> + (startDate.getMonth() + <span class="number">1</span>) + <span class="string">"月"</span> + startDate.getDate() + <span class="string">"日"</span>;</span><br><span class="line">  <span class="comment">//获取结束日期</span></span><br><span class="line">  <span class="keyword">let</span> eTime = date.getTime() + eWeek * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line">  <span class="keyword">let</span> endDate = <span class="keyword">new</span> <span class="built_in">Date</span>(eTime); <span class="comment">//时间戳转换</span></span><br><span class="line">  <span class="keyword">let</span> eDate = endDate.getFullYear() + <span class="string">"年"</span> + (endDate.getMonth() + <span class="number">1</span>) + <span class="string">"月"</span> + endDate.getDate() + <span class="string">"日"</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    startDate: startDate,</span><br><span class="line">    endDate: endDate,</span><br><span class="line">    sDate: sDate,</span><br><span class="line">    eDate: eDate</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="根据传入时间计算当前时间是该月份的第几周-以周日作为节点，d时间对象-必须是系统原生时间对象"><a href="#根据传入时间计算当前时间是该月份的第几周-以周日作为节点，d时间对象-必须是系统原生时间对象" class="headerlink" title="根据传入时间计算当前时间是该月份的第几周,以周日作为节点，d时间对象,必须是系统原生时间对象;"></a>根据传入时间计算当前时间是该月份的第几周,以周日作为节点，d时间对象,必须是系统原生时间对象;</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">calcWeek(d) &#123;</span><br><span class="line">  <span class="keyword">let</span> now = d.getTime(); <span class="comment">//当前时间戳</span></span><br><span class="line">  <span class="keyword">let</span> res = &#123;<span class="attr">now</span>: d.getTime()&#125;; <span class="comment">//组装返回数据</span></span><br><span class="line">  <span class="keyword">let</span> oneDayLong = <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>; <span class="comment">//一天时间长度</span></span><br><span class="line">  <span class="comment">//根据当前时间获取周日</span></span><br><span class="line">  <span class="keyword">let</span> monthHead = <span class="keyword">new</span> <span class="built_in">Date</span>(d.getFullYear(), d.getMonth(), <span class="number">1</span>).getTime(); <span class="comment">//月初时间戳</span></span><br><span class="line">  <span class="keyword">let</span> monthEnd = <span class="keyword">new</span> <span class="built_in">Date</span>(d.getFullYear(), d.getMonth() + <span class="number">1</span>, <span class="number">1</span>).getTime() - <span class="number">24</span> * <span class="number">3600</span> * <span class="number">1000</span>; <span class="comment">//月末时间戳</span></span><br><span class="line">  <span class="keyword">let</span> wd;<span class="comment">//根据传入时间计算传入日期对应的截止时间戳</span></span><br><span class="line">  <span class="keyword">if</span> (d.getDay() === <span class="number">0</span>) &#123;</span><br><span class="line">    wd = now</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    wd = now + (<span class="number">7</span> - d.getDay()) * oneDayLong</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (wd &gt; monthEnd) &#123;</span><br><span class="line">    <span class="comment">//截止大于月底就是下月的第一周</span></span><br><span class="line">    res.week = <span class="number">1</span>;</span><br><span class="line">    res.month = <span class="keyword">new</span> <span class="built_in">Date</span>(d).getMonth() + <span class="number">2</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">new</span> <span class="built_in">Date</span>(wd).getDate() &lt;= <span class="number">7</span>) &#123;</span><br><span class="line">    <span class="comment">//截止小于7号就是本月第一周</span></span><br><span class="line">    res.week = <span class="number">1</span>;</span><br><span class="line">    res.month = <span class="keyword">new</span> <span class="built_in">Date</span>(d).getMonth() + <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">new</span> <span class="built_in">Date</span>(monthHead).getDay() === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">//本月一号是周一的情况下,截止除以7就是第几周</span></span><br><span class="line">    res.week = <span class="keyword">new</span> <span class="built_in">Date</span>(wd).getDate() / <span class="number">7</span>;</span><br><span class="line">    res.month = <span class="keyword">new</span> <span class="built_in">Date</span>(d).getMonth() + <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//截止 日期 减去第一周天数 除以7再加一就是第几周</span></span><br><span class="line">    <span class="keyword">let</span> weekDayDate = <span class="keyword">new</span> <span class="built_in">Date</span>(wd).getDate(); <span class="comment">//截止日期</span></span><br><span class="line">    <span class="keyword">let</span> firstWeekDays = <span class="keyword">new</span> <span class="built_in">Date</span>(monthHead).getDay(); <span class="comment">//当月第一周长度</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">new</span> <span class="built_in">Date</span>(monthHead).getDay() === <span class="number">0</span>) &#123;</span><br><span class="line">      firstWeekDays = <span class="number">1</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      firstWeekDays = <span class="number">8</span> - <span class="keyword">new</span> <span class="built_in">Date</span>(monthHead).getDay()</span><br><span class="line">    &#125;</span><br><span class="line">    res.week = (weekDayDate - firstWeekDays) / <span class="number">7</span> + <span class="number">1</span>;</span><br><span class="line">    res.month = <span class="keyword">new</span> <span class="built_in">Date</span>(d).getMonth() + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br></pre></td><td class="code"><pre><span class="line">uploader(obj) &#123;</span><br><span class="line">  <span class="comment">//变量定义区</span></span><br><span class="line">  <span class="keyword">let</span> config=obj;</span><br><span class="line">  <span class="comment">// const qiniuUrl = 'https://upload.qiniup.com'; //上传接口</span></span><br><span class="line">  <span class="keyword">let</span> exitMsg = &#123;&#125;; <span class="comment">//对外消息通知</span></span><br><span class="line">  <span class="keyword">let</span> proStatus = <span class="literal">true</span>;<span class="comment">//前进状态</span></span><br><span class="line">  <span class="comment">//accept属性列表</span></span><br><span class="line">  <span class="keyword">let</span> acceptList = &#123;</span><br><span class="line">    <span class="string">"3gpp"</span>: <span class="string">"audio/3gpp, video/3gpp"</span>,</span><br><span class="line">    ac3: <span class="string">"audio/ac3"</span>,</span><br><span class="line">    asf: <span class="string">"allpication/vnd.ms-asf"</span>,</span><br><span class="line">    au: <span class="string">"audio/basic"</span>,</span><br><span class="line">    css: <span class="string">"text/css"</span>,</span><br><span class="line">    csv: <span class="string">"text/csv"</span>,</span><br><span class="line">    doc: <span class="string">"application/msword"</span>,</span><br><span class="line">    dot: <span class="string">"application/msword"</span>,</span><br><span class="line">    dtd: <span class="string">"application/xml-dtd"</span>,</span><br><span class="line">    dwg: <span class="string">"image/vnd.dwg"</span>,</span><br><span class="line">    dxf: <span class="string">"image/vnd.dxf"</span>,</span><br><span class="line">    gif: <span class="string">"image/gif"</span>,</span><br><span class="line">    htm: <span class="string">"text/html"</span>,</span><br><span class="line">    html: <span class="string">"text/html"</span>,</span><br><span class="line">    jp2: <span class="string">"image/jp2"</span>,</span><br><span class="line">    jpe: <span class="string">"image/jpeg"</span>,</span><br><span class="line">    jpeg: <span class="string">"image/jpeg"</span>,</span><br><span class="line">    jpg: <span class="string">"image/jpeg"</span>,</span><br><span class="line">    js: <span class="string">"text/javascript, application/javascript"</span>,</span><br><span class="line">    json: <span class="string">"application/json"</span>,</span><br><span class="line">    mp2: <span class="string">"audio/mpeg, video/mpeg"</span>,</span><br><span class="line">    mp3: <span class="string">"audio/mpeg"</span>,</span><br><span class="line">    mp4: <span class="string">"audio/mp4, video/mp4"</span>,</span><br><span class="line">    mpeg: <span class="string">"video/mpeg"</span>,</span><br><span class="line">    mpg: <span class="string">"video/mpeg"</span>,</span><br><span class="line">    mpp: <span class="string">"application/vnd.ms-project"</span>,</span><br><span class="line">    ogg: <span class="string">"application/ogg, audio/ogg"</span>,</span><br><span class="line">    pdf: <span class="string">"application/pdf"</span>,</span><br><span class="line">    png: <span class="string">"image/png"</span>,</span><br><span class="line">    pot: <span class="string">"application/vnd.ms-powerpoint"</span>,</span><br><span class="line">    pps: <span class="string">"application/vnd.ms-powerpoint"</span>,</span><br><span class="line">    ppt: <span class="string">"application/vnd.ms-powerpoint"</span>,</span><br><span class="line">    rtf: <span class="string">"application/rtf, text/rtf"</span>,</span><br><span class="line">    svf: <span class="string">"image/vnd.svf"</span>,</span><br><span class="line">    tif: <span class="string">"image/tiff"</span>,</span><br><span class="line">    tiff: <span class="string">"image/tiff"</span>,</span><br><span class="line">    txt: <span class="string">"text/plain"</span>,</span><br><span class="line">    wdb: <span class="string">"application/vnd.ms-works"</span>,</span><br><span class="line">    wps: <span class="string">"application/vnd.ms-works"</span>,</span><br><span class="line">    xhtml: <span class="string">"application/xhtml+xml"</span>,</span><br><span class="line">    xlc: <span class="string">"application/vnd.ms-excel"</span>,</span><br><span class="line">    xlm: <span class="string">"application/vnd.ms-excel"</span>,</span><br><span class="line">    xls: <span class="string">"application/vnd.ms-excel"</span>,</span><br><span class="line">    xlt: <span class="string">"application/vnd.ms-excel"</span>,</span><br><span class="line">    xlw: <span class="string">"application/vnd.ms-excel"</span>,</span><br><span class="line">    xml: <span class="string">"text/xml, application/xml"</span>,</span><br><span class="line">    zip: <span class="string">"aplication/zip"</span>,</span><br><span class="line">    xlsx: <span class="string">"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"</span>,</span><br><span class="line">    xltx: <span class="string">"application/vnd.openxmlformats-officedocument.spreadsheetml.template"</span>,</span><br><span class="line">    potx: <span class="string">"application/vnd.openxmlformats-officedocument.presentationml.template"</span>,</span><br><span class="line">    ppsx: <span class="string">"application/vnd.openxmlformats-officedocument.presentationml.slideshow"</span>,</span><br><span class="line">    pptx: <span class="string">"application/vnd.openxmlformats-officedocument.presentationml.presentation"</span>,</span><br><span class="line">    sldx: <span class="string">"application/vnd.openxmlformats-officedocument.presentationml.slide"</span>,</span><br><span class="line">    docx: <span class="string">"application/vnd.openxmlformats-officedocument.wordprocessingml.document"</span>,</span><br><span class="line">    dotx: <span class="string">"application/vnd.openxmlformats-officedocument.wordprocessingml.template"</span>,</span><br><span class="line">    xlsm: <span class="string">"application/vnd.ms-excel.addin.macroEnabled.12"</span>,</span><br><span class="line">    xlsb: <span class="string">"application/vnd.ms-excel.sheet.binary.macroEnabled.12"</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">//创建input元素</span></span><br><span class="line">  <span class="keyword">let</span> upIpt = <span class="built_in">document</span>.createElement(<span class="string">'input'</span>);</span><br><span class="line">  <span class="keyword">let</span> body = <span class="built_in">document</span>.querySelector(<span class="string">'body'</span>);</span><br><span class="line">  upIpt.type = <span class="string">'file'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//将可接受的文件类型添加给input</span></span><br><span class="line">  <span class="keyword">if</span> (obj.hasOwnProperty(<span class="string">'accept'</span>) &amp;&amp; obj.accept.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> accetpArr = [];</span><br><span class="line">    <span class="keyword">let</span> flag = <span class="literal">true</span>;</span><br><span class="line">    obj.accept.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (acceptList.hasOwnProperty(e)) &#123;</span><br><span class="line">        accetpArr.push(acceptList[e])</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        errorFn(<span class="string">'没有找到文件类型:'</span> + e);</span><br><span class="line">        flag = <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">      upIpt.accept = accetpArr.join(<span class="string">','</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  upIpt.style = <span class="string">'display:none'</span>;</span><br><span class="line">  body.appendChild(upIpt);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//监听上传元素值改变</span></span><br><span class="line">  upIpt.onchange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> val = upIpt.value;</span><br><span class="line">    <span class="keyword">if</span> (val) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//上传之前回调</span></span><br><span class="line">      <span class="keyword">if</span> (obj.hasOwnProperty(<span class="string">'beforeUpload'</span>)) &#123;</span><br><span class="line">        obj.beforeUpload();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//验证文件</span></span><br><span class="line">      checkFile(upIpt, obj.size);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//获取token然后开始上传</span></span><br><span class="line">      <span class="keyword">if</span> (proStatus) &#123;</span><br><span class="line">        getToken(uploadFile)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//验证文件</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">checkFile</span>(<span class="params">obj, size</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (size &amp;&amp; !<span class="regexp">/^[1-9]\d*$/</span>.test(size)) &#123;</span><br><span class="line">      errorFn(<span class="string">'文件大小必须是正整数'</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> file;</span><br><span class="line">    <span class="keyword">let</span> isIE = <span class="regexp">/msie/i</span>.test(navigator.userAgent) &amp;&amp; !<span class="built_in">window</span>.opera;</span><br><span class="line">    <span class="keyword">if</span> (isIE &amp;&amp; !obj.files) &#123;</span><br><span class="line">      <span class="keyword">let</span> filePath = obj.value;</span><br><span class="line">      <span class="keyword">let</span> fileSystem = <span class="keyword">new</span> ActiveXObject(<span class="string">"Scripting.FileSystemObject"</span>);</span><br><span class="line">      file = fileSystem.GetFile(filePath);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      file = obj.files[<span class="number">0</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">let</span>  fileSize = <span class="built_in">Math</span>.round(file.size / <span class="number">1024</span> * <span class="number">100</span>) / <span class="number">100</span>; <span class="comment">//单位为KB</span></span><br><span class="line">    <span class="keyword">if</span> (size &amp;&amp; fileSize &gt;= size) &#123;</span><br><span class="line">      errorFn(<span class="string">'上传文件不能超过:'</span> + size + <span class="string">"kb"</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(config.hasOwnProperty(<span class="string">'checkSlot'</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(!config.checkSlot(file))&#123;</span><br><span class="line">          errorFn(<span class="string">'自定义条件验证失败'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取token</span></span><br><span class="line">  <span class="keyword">let</span> getToken = <span class="function"><span class="keyword">function</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    <span class="comment">// 获取七牛token</span></span><br><span class="line">    <span class="comment">// xhr.open("POST", 'https://toolapi.mayte.cn/qt2', true);</span></span><br><span class="line">    xhr.setRequestHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/x-www-form-urlencoded;charset=UTF-8"</span>);</span><br><span class="line">    xhr.setRequestHeader(<span class="string">"Accept"</span>, <span class="string">"application/json, text/javascript, */*; q=0.01"</span>);</span><br><span class="line">    xhr.setRequestHeader(<span class="string">"X-Requested-With"</span>, <span class="string">"XMLHttpRequest"</span>);</span><br><span class="line">    xhr.send();</span><br><span class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (xhr.status === <span class="number">200</span>) &#123;</span><br><span class="line">          fn &amp;&amp; fn(xhr.responseText)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          errorFn(<span class="string">'token获取出错,错误代码:'</span> + xhr.status)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//上传文件</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">uploadFile</span>(<span class="params">token</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> file, directory;</span><br><span class="line">    <span class="keyword">let</span> isIE = <span class="regexp">/msie/i</span>.test(navigator.userAgent) &amp;&amp; !<span class="built_in">window</span>.opera;</span><br><span class="line">    <span class="keyword">if</span> (isIE &amp;&amp; !upIpt.files) &#123;</span><br><span class="line">      <span class="keyword">let</span> filePath = upIpt.value;</span><br><span class="line">      <span class="keyword">let</span> fileSystem = <span class="keyword">new</span> ActiveXObject(<span class="string">"Scripting.FileSystemObject"</span>);</span><br><span class="line">      file = fileSystem.GetFile(filePath);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      file = upIpt.files[<span class="number">0</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> form = <span class="keyword">new</span> FormData();</span><br><span class="line">    form.append(<span class="string">'file'</span>, file);</span><br><span class="line">    form.append(<span class="string">'token'</span>, token);</span><br><span class="line">    form.append(<span class="string">'x:folder'</span>, directory);</span><br><span class="line">    <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    xhr.open(<span class="string">'POST'</span>, qiniuUrl, <span class="literal">true</span>);</span><br><span class="line">    xhr.setRequestHeader(<span class="string">'Accept'</span>, <span class="string">'application/json, text/javascript, */*; q=0.01'</span>);</span><br><span class="line">    xhr.upload.onprogress = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (obj.hasOwnProperty(<span class="string">'progress'</span>)) &#123;</span><br><span class="line">        obj.progress(event)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (obj.hasOwnProperty(<span class="string">'whatever'</span>)) &#123;</span><br><span class="line">          obj.whatever()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (xhr.status === <span class="number">200</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (obj.hasOwnProperty(<span class="string">'success'</span>)) &#123;</span><br><span class="line">            obj.success(xhr.responseText)</span><br><span class="line">          &#125;</span><br><span class="line">          upIpt.remove();<span class="comment">//移除上传标签</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          errorFn(<span class="string">'上传是出错,错误代码:'</span> + xhr.status + <span class="string">" "</span> + xhr.responseText)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    xhr.send(form) <span class="comment">//发射</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取文件类型</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getFileSuffix</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!item) <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">let</span> els = item.split(<span class="string">'.'</span>);</span><br><span class="line">    <span class="keyword">return</span> (els[els.length - <span class="number">1</span>].split(<span class="string">'-'</span>))[<span class="number">0</span>]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//虚拟点击</span></span><br><span class="line">  upIpt.click();</span><br><span class="line"></span><br><span class="line">  <span class="comment">//抛出错误信息</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">errorFn</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">    exitMsg.status = <span class="number">0</span>;</span><br><span class="line">    exitMsg.msg = d;</span><br><span class="line">    proStatus = <span class="literal">false</span>; <span class="comment">//不再继续</span></span><br><span class="line">    upIpt.remove(); <span class="comment">//删除上传标签</span></span><br><span class="line">    <span class="keyword">if</span> (obj.hasOwnProperty(<span class="string">'fail'</span>)) &#123;</span><br><span class="line">      obj.fail(exitMsg)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (obj.hasOwnProperty(<span class="string">'whatever'</span>)) &#123;</span><br><span class="line">      obj.whatever()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="身份证验证"><a href="#身份证验证" class="headerlink" title="身份证验证"></a>身份证验证</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">decideIdcard(value) &#123;</span><br><span class="line">  <span class="keyword">if</span> (value.length === <span class="number">15</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> reg = <span class="regexp">/^[1-9][0-9]&#123;5&#125;[2-9][0-9](0[1-9]|1[0-2])(0[1-9]|[1-2][0-9]|3[0-1])[0-9]&#123;3&#125;$/</span>;</span><br><span class="line">    <span class="keyword">return</span> reg.test(value);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value.length === <span class="number">18</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> xiaoYan = [<span class="string">"1"</span>, <span class="string">"0"</span>, <span class="string">"X"</span>, <span class="string">"9"</span>, <span class="string">"8"</span>, <span class="string">"7"</span>, <span class="string">"6"</span>, <span class="string">"5"</span>, <span class="string">"4"</span>, <span class="string">"3"</span>, <span class="string">"2"</span>];</span><br><span class="line">    <span class="keyword">let</span> xiao = [<span class="string">"1"</span>, <span class="string">"0"</span>, <span class="string">"x"</span>, <span class="string">"9"</span>, <span class="string">"8"</span>, <span class="string">"7"</span>, <span class="string">"6"</span>, <span class="string">"5"</span>, <span class="string">"4"</span>, <span class="string">"3"</span>, <span class="string">"2"</span>];</span><br><span class="line">    <span class="keyword">let</span> yuShu = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>];</span><br><span class="line">    <span class="keyword">let</span> xiShu = [<span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>];</span><br><span class="line">    <span class="keyword">let</span> cardArray = value.split(<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; cardArray.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">      sum += <span class="built_in">parseInt</span>(cardArray[i]) * xiShu[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> yu = sum % <span class="number">11</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; yuShu.length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (yu === yuShu[i]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (value.substring(value.length - <span class="number">1</span>).toUpperCase() === xiaoYan[i]) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="判断是否为空"><a href="#判断是否为空" class="headerlink" title="判断是否为空"></a>判断是否为空</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">isEmpty(val) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> val === <span class="string">'number'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (!val || val === <span class="literal">undefined</span> || <span class="keyword">typeof</span> val === <span class="string">'undefined'</span> || val === <span class="literal">null</span> || val === <span class="string">'undefined'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="上传文件-1"><a href="#上传文件-1" class="headerlink" title="上传文件"></a>上传文件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uploader</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//变量定义区</span></span><br><span class="line">        <span class="keyword">let</span> config=obj;</span><br><span class="line">        <span class="keyword">const</span> qiniuUrl = <span class="string">'https://upload.qiniup.com'</span>; <span class="comment">//上传接口</span></span><br><span class="line">        <span class="keyword">let</span> exitMsg = &#123;&#125;; <span class="comment">//对外消息通知</span></span><br><span class="line">        <span class="keyword">let</span> proStatus = <span class="literal">true</span>;<span class="comment">//前进状态</span></span><br><span class="line">        <span class="comment">//accept属性列表</span></span><br><span class="line">        <span class="keyword">let</span> acceptList = &#123;</span><br><span class="line">        all:<span class="string">""</span>,</span><br><span class="line">        <span class="string">"3gpp"</span>: <span class="string">"audio/3gpp, video/3gpp"</span>,</span><br><span class="line">        ac3: <span class="string">"audio/ac3"</span>,</span><br><span class="line">        asf: <span class="string">"allpication/vnd.ms-asf"</span>,</span><br><span class="line">        au: <span class="string">"audio/basic"</span>,</span><br><span class="line">        css: <span class="string">"text/css"</span>,</span><br><span class="line">        csv: <span class="string">"text/csv"</span>,</span><br><span class="line">        doc: <span class="string">"application/msword"</span>,</span><br><span class="line">        dot: <span class="string">"application/msword"</span>,</span><br><span class="line">        dtd: <span class="string">"application/xml-dtd"</span>,</span><br><span class="line">        dwg: <span class="string">"image/vnd.dwg"</span>,</span><br><span class="line">        dxf: <span class="string">"image/vnd.dxf"</span>,</span><br><span class="line">        gif: <span class="string">"image/gif"</span>,</span><br><span class="line">        htm: <span class="string">"text/html"</span>,</span><br><span class="line">        html: <span class="string">"text/html"</span>,</span><br><span class="line">        jp2: <span class="string">"image/jp2"</span>,</span><br><span class="line">        jpe: <span class="string">"image/jpeg"</span>,</span><br><span class="line">        jpeg: <span class="string">"image/jpeg"</span>,</span><br><span class="line">        jpg: <span class="string">"image/jpeg"</span>,</span><br><span class="line">        js: <span class="string">"text/javascript, application/javascript"</span>,</span><br><span class="line">        json: <span class="string">"application/json"</span>,</span><br><span class="line">        mp2: <span class="string">"audio/mpeg, video/mpeg"</span>,</span><br><span class="line">        mp3: <span class="string">"audio/mpeg"</span>,</span><br><span class="line">        mp4: <span class="string">"audio/mp4, video/mp4"</span>,</span><br><span class="line">        mpeg: <span class="string">"video/mpeg"</span>,</span><br><span class="line">        mpg: <span class="string">"video/mpeg"</span>,</span><br><span class="line">        mpp: <span class="string">"application/vnd.ms-project"</span>,</span><br><span class="line">        ogg: <span class="string">"application/ogg, audio/ogg"</span>,</span><br><span class="line">        pdf: <span class="string">"application/pdf"</span>,</span><br><span class="line">        png: <span class="string">"image/png"</span>,</span><br><span class="line">        pot: <span class="string">"application/vnd.ms-powerpoint"</span>,</span><br><span class="line">        pps: <span class="string">"application/vnd.ms-powerpoint"</span>,</span><br><span class="line">        ppt: <span class="string">"application/vnd.ms-powerpoint"</span>,</span><br><span class="line">        rtf: <span class="string">"application/rtf, text/rtf"</span>,</span><br><span class="line">        svf: <span class="string">"image/vnd.svf"</span>,</span><br><span class="line">        tif: <span class="string">"image/tiff"</span>,</span><br><span class="line">        tiff: <span class="string">"image/tiff"</span>,</span><br><span class="line">        txt: <span class="string">"text/plain"</span>,</span><br><span class="line">        wdb: <span class="string">"application/vnd.ms-works"</span>,</span><br><span class="line">        wps: <span class="string">"application/vnd.ms-works"</span>,</span><br><span class="line">        xhtml: <span class="string">"application/xhtml+xml"</span>,</span><br><span class="line">        xlc: <span class="string">"application/vnd.ms-excel"</span>,</span><br><span class="line">        xlm: <span class="string">"application/vnd.ms-excel"</span>,</span><br><span class="line">        xls: <span class="string">"application/vnd.ms-excel"</span>,</span><br><span class="line">        xlt: <span class="string">"application/vnd.ms-excel"</span>,</span><br><span class="line">        xlw: <span class="string">"application/vnd.ms-excel"</span>,</span><br><span class="line">        xml: <span class="string">"text/xml, application/xml"</span>,</span><br><span class="line">        zip: <span class="string">"aplication/zip"</span>,</span><br><span class="line">        xlsx: <span class="string">"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"</span>,</span><br><span class="line">        xltx: <span class="string">"application/vnd.openxmlformats-officedocument.spreadsheetml.template"</span>,</span><br><span class="line">        potx: <span class="string">"application/vnd.openxmlformats-officedocument.presentationml.template"</span>,</span><br><span class="line">        ppsx: <span class="string">"application/vnd.openxmlformats-officedocument.presentationml.slideshow"</span>,</span><br><span class="line">        pptx: <span class="string">"application/vnd.openxmlformats-officedocument.presentationml.presentation"</span>,</span><br><span class="line">        sldx: <span class="string">"application/vnd.openxmlformats-officedocument.presentationml.slide"</span>,</span><br><span class="line">        docx: <span class="string">"application/vnd.openxmlformats-officedocument.wordprocessingml.document"</span>,</span><br><span class="line">        dotx: <span class="string">"application/vnd.openxmlformats-officedocument.wordprocessingml.template"</span>,</span><br><span class="line">        xlsm: <span class="string">"application/vnd.ms-excel.addin.macroEnabled.12"</span>,</span><br><span class="line">        xlsb: <span class="string">"application/vnd.ms-excel.sheet.binary.macroEnabled.12"</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//创建input元素</span></span><br><span class="line">        <span class="keyword">let</span> upIpt = <span class="built_in">document</span>.createElement(<span class="string">'input'</span>);</span><br><span class="line">        <span class="keyword">let</span> body = <span class="built_in">document</span>.querySelector(<span class="string">'body'</span>);</span><br><span class="line">        upIpt.type = <span class="string">'file'</span>;</span><br><span class="line">        upIpt.multiple = <span class="literal">true</span>;</span><br><span class="line">        upIpt.multiple = obj.multiple;</span><br><span class="line">        <span class="comment">//将可接受的文件类型添加给input</span></span><br><span class="line">        <span class="keyword">if</span> (obj.hasOwnProperty(<span class="string">'accept'</span>) &amp;&amp; obj.accept.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> accetpArr = [];</span><br><span class="line">        <span class="keyword">let</span> flag = <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">        obj.accept.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (acceptList.hasOwnProperty(e)) &#123;</span><br><span class="line">            accetpArr.push(acceptList[e])</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            errorFn(<span class="string">'没有找到文件类型:'</span> + e);</span><br><span class="line">            flag = <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            upIpt.accept = accetpArr.join(<span class="string">','</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        upIpt.style = <span class="string">'display:none'</span>;</span><br><span class="line">        body.appendChild(upIpt);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//监听上传元素值改变</span></span><br><span class="line">        upIpt.onchange = <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> val = upIpt.value;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (val) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//上传之前回调</span></span><br><span class="line">            <span class="keyword">if</span> (obj.hasOwnProperty(<span class="string">'beforeUpload'</span>)) &#123;</span><br><span class="line">            obj.beforeUpload();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; upIpt.files.length; i++)&#123;</span><br><span class="line">            <span class="comment">//验证文件</span></span><br><span class="line">            <span class="keyword">let</span> file = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(upIpt))</span><br><span class="line">            file.files = [upIpt.files[i]]</span><br><span class="line">            checkFile(file, obj.size);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取token然后开始上传</span></span><br><span class="line">            <span class="keyword">if</span> (proStatus) &#123;</span><br><span class="line">                getToken(uploadFile,file)</span><br><span class="line">            &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//验证文件</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">checkFile</span>(<span class="params">obj, size</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size &amp;&amp; !<span class="regexp">/^[1-9]\d*$/</span>.test(size)) &#123;</span><br><span class="line">            errorFn(<span class="string">'文件大小必须是正整数'</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> file;</span><br><span class="line">        <span class="keyword">let</span> isIE = <span class="regexp">/msie/i</span>.test(navigator.userAgent) &amp;&amp; !<span class="built_in">window</span>.opera;</span><br><span class="line">        <span class="keyword">if</span> (isIE &amp;&amp; !obj.files) &#123;</span><br><span class="line">            <span class="keyword">let</span> filePath = obj.value;</span><br><span class="line">            <span class="keyword">let</span> fileSystem = <span class="keyword">new</span> ActiveXObject(<span class="string">"Scripting.FileSystemObject"</span>);</span><br><span class="line">            file = fileSystem.GetFile(filePath);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            file = obj.files[<span class="number">0</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> rule = <span class="string">'jpgpngjpeg'</span>;</span><br><span class="line">        <span class="keyword">let</span> name = file.name.split(<span class="string">"."</span>)[file.name.split(<span class="string">"."</span>).length<span class="number">-1</span>].replace(<span class="string">"/\s+/g,''"</span>);</span><br><span class="line">        <span class="keyword">if</span>(rule.indexOf(name) &lt; <span class="number">0</span> &amp;&amp; config.accept &amp;&amp; config.accept[<span class="number">0</span>] == <span class="string">"all"</span>)&#123;</span><br><span class="line">            errorFn(<span class="string">"文件格式不支持！"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span>  fileSize = <span class="built_in">Math</span>.round(file.size / <span class="number">1024</span> * <span class="number">100</span>) / <span class="number">100</span>; <span class="comment">//单位为KB</span></span><br><span class="line">        <span class="keyword">if</span> (size &amp;&amp; fileSize &gt;= size) &#123;</span><br><span class="line">            errorFn(<span class="string">'上传文件不能超过:'</span> + size + <span class="string">"kb"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(config.hasOwnProperty(<span class="string">'checkSlot'</span>))&#123;</span><br><span class="line">            <span class="keyword">if</span>(!config.checkSlot(file))&#123;</span><br><span class="line">                errorFn(<span class="string">'自定义条件验证失败'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取token</span></span><br><span class="line">        <span class="keyword">let</span> getToken = <span class="function"><span class="keyword">function</span> (<span class="params">fn,file</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">        xhr.open(<span class="string">"POST"</span>, <span class="string">'https://toolapi.maytek.cn/qt2'</span>, <span class="literal">true</span>);</span><br><span class="line">        xhr.setRequestHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/x-www-form-urlencoded;charset=UTF-8"</span>);</span><br><span class="line">        xhr.setRequestHeader(<span class="string">"Accept"</span>, <span class="string">"application/json, text/javascript, */*; q=0.01"</span>);</span><br><span class="line">        xhr.setRequestHeader(<span class="string">"X-Requested-With"</span>, <span class="string">"XMLHttpRequest"</span>);</span><br><span class="line">        xhr.send();</span><br><span class="line">        xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (xhr.status === <span class="number">200</span>) &#123;</span><br><span class="line">                fn &amp;&amp; fn(xhr.responseText,file)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                errorFn(<span class="string">'token获取出错,错误代码:'</span> + xhr.status)</span><br><span class="line">            &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//上传文件</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">uploadFile</span>(<span class="params">token,currentfile</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> file, directory;</span><br><span class="line">        <span class="keyword">let</span> isIE = <span class="regexp">/msie/i</span>.test(navigator.userAgent) &amp;&amp; !<span class="built_in">window</span>.opera;</span><br><span class="line">        <span class="keyword">if</span> (isIE &amp;&amp; !currentfile.files) &#123;</span><br><span class="line">            <span class="keyword">let</span> filePath = currentfile.value;</span><br><span class="line">            <span class="keyword">let</span> fileSystem = <span class="keyword">new</span> ActiveXObject(<span class="string">"Scripting.FileSystemObject"</span>);</span><br><span class="line">            file = fileSystem.GetFile(filePath);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            file = currentfile.files[<span class="number">0</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> form = <span class="keyword">new</span> FormData();</span><br><span class="line">        form.append(<span class="string">'file'</span>, file);</span><br><span class="line">        form.append(<span class="string">'token'</span>, token);</span><br><span class="line">        form.append(<span class="string">'x:folder'</span>, <span class="string">'guide_mini'</span>);</span><br><span class="line">        <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">        xhr.open(<span class="string">'POST'</span>, qiniuUrl, <span class="literal">true</span>);</span><br><span class="line">        xhr.setRequestHeader(<span class="string">'Accept'</span>, <span class="string">'application/json, text/javascript, */*; q=0.01'</span>);</span><br><span class="line">        xhr.upload.onprogress = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (obj.hasOwnProperty(<span class="string">'progress'</span>)) &#123;</span><br><span class="line">            obj.progress(event)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (obj.hasOwnProperty(<span class="string">'whatever'</span>)) &#123;</span><br><span class="line">                obj.whatever()</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (xhr.status === <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (obj.hasOwnProperty(<span class="string">'success'</span>)) &#123;</span><br><span class="line">                obj.success(xhr.responseText)</span><br><span class="line">                &#125;</span><br><span class="line">                upIpt.remove();<span class="comment">//移除上传标签</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                errorFn(<span class="string">'上传是出错,错误代码:'</span> + xhr.status + <span class="string">" "</span> + xhr.responseText)</span><br><span class="line">            &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        xhr.send(form) <span class="comment">//发射</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取文件类型</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">getFileSuffix</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!item) <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">let</span> els = item.split(<span class="string">'.'</span>);</span><br><span class="line">        <span class="keyword">return</span> (els[els.length - <span class="number">1</span>].split(<span class="string">'-'</span>))[<span class="number">0</span>]</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//虚拟点击</span></span><br><span class="line">        upIpt.click();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//抛出错误信息</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">errorFn</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">          exitMsg.status = <span class="number">0</span>;</span><br><span class="line">          exitMsg.msg = d;</span><br><span class="line">          proStatus = <span class="literal">false</span>; <span class="comment">//不再继续</span></span><br><span class="line">          upIpt.remove(); <span class="comment">//删除上传标签</span></span><br><span class="line">          <span class="keyword">if</span> (obj.hasOwnProperty(<span class="string">'fail'</span>)) &#123;</span><br><span class="line">              obj.fail(exitMsg)</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (obj.hasOwnProperty(<span class="string">'whatever'</span>)) &#123;</span><br><span class="line">              obj.whatever()</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- 已经写好的文章在对应的md文件头部添加top：{number}即可 数值越大优先级越高 --&gt;
&lt;h3 id=&quot;cookie的获取、设置、删除&quot;&gt;&lt;a href=&quot;#cookie的获取、设置、删除&quot; class=&quot;headerlink&quot; title=&quot;cookie的获取
      
    
    </summary>
    
      <category term="js" scheme="wanderfully.club/categories/js/"/>
    
    
      <category term="js" scheme="wanderfully.club/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>两种对象方法区别</title>
    <link href="wanderfully.club/2019/05/25/%E4%B8%A4%E7%A7%8D%E5%AF%B9%E8%B1%A1%E6%96%B9%E6%B3%95%E5%8C%BA%E5%88%AB/"/>
    <id>wanderfully.club/2019/05/25/两种对象方法区别/</id>
    <published>2019-05-25T07:34:32.000Z</published>
    <updated>2019-05-28T02:16:37.470Z</updated>
    
    <content type="html"><![CDATA[<!-- 已经写好的文章在对应的md文件头部添加top：{number}即可 数值越大优先级越高 --><h3 id="原型法（可访问所有的方法和属性）"><a href="#原型法（可访问所有的方法和属性）" class="headerlink" title="原型法（可访问所有的方法和属性）"></a>原型法（可访问所有的方法和属性）</h3><p>通过构造函数的prototype，这种写法会将全部的prototype上的属性方法全部暴露出来：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> Drage = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = obj.name;</span><br><span class="line">        ......</span><br><span class="line">        ......</span><br><span class="line">    &#125;</span><br><span class="line">    Drage.prototype = &#123;</span><br><span class="line">        add:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        &#125;,</span><br><span class="line">        del:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">        .......</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">window</span>.Drage = Drage;</span><br><span class="line">&#125;)(<span class="built_in">window</span>,<span class="built_in">document</span>)</span><br></pre></td></tr></table></figure></p><h3 id="对象法（返回指定的方法或属性）"><a href="#对象法（返回指定的方法或属性）" class="headerlink" title="对象法（返回指定的方法或属性）"></a>对象法（返回指定的方法或属性）</h3><p>如果不想将prototype上的属性和方法暴露出来，只是想暴露某一个方法或属性，并且不用什么配置的话，可以通过返回来暴露所需要的东西：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">module</span> = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">var</span> listen = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"小明"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> sing = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> name = listen();</span><br><span class="line">        <span class="keyword">return</span> name+<span class="string">"在sing"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">        add:add,</span><br><span class="line">        sing:sing</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure></p><p>调用方式：</p><blockquote><p>modoule.sing();modoule.add();</p></blockquote><p>listen方法没有暴露出来，所以可以自己定义想暴露出来的方法</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- 已经写好的文章在对应的md文件头部添加top：{number}即可 数值越大优先级越高 --&gt;
&lt;h3 id=&quot;原型法（可访问所有的方法和属性）&quot;&gt;&lt;a href=&quot;#原型法（可访问所有的方法和属性）&quot; class=&quot;headerlink&quot; title=&quot;原型法（可访问
      
    
    </summary>
    
      <category term="js" scheme="wanderfully.club/categories/js/"/>
    
    
      <category term="js" scheme="wanderfully.club/tags/js/"/>
    
      <category term="原型" scheme="wanderfully.club/tags/%E5%8E%9F%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>js中的一些小技巧</title>
    <link href="wanderfully.club/2019/05/24/js%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>wanderfully.club/2019/05/24/js中的一些小技巧/</id>
    <published>2019-05-24T09:43:05.000Z</published>
    <updated>2019-05-28T02:16:06.426Z</updated>
    
    <content type="html"><![CDATA[<!-- 已经写好的文章在对应的md文件头部添加top：{number}即可 数值越大优先级越高 --><h3 id="实用型"><a href="#实用型" class="headerlink" title="实用型"></a>实用型</h3><h4 id="获取url查询参数"><a href="#获取url查询参数" class="headerlink" title="获取url查询参数"></a>获取url查询参数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> q = &#123;&#125;;</span><br><span class="line">location.search.replace(<span class="regexp">/([^?&amp;=]+)=([^&amp;]+)/g</span>,(_,k,v)=&gt;q[k] = v);</span><br><span class="line"><span class="built_in">console</span>.log(q)</span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string">#### reduce用法</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>javascript</span><br><span class="line"><span class="comment">// 统计数组中相同项的个数</span></span><br><span class="line"><span class="keyword">var</span> cars = [<span class="string">'BMW'</span>,<span class="string">'Benz'</span>, <span class="string">'Benz'</span>, <span class="string">'Tesla'</span>, <span class="string">'BMW'</span>, <span class="string">'Toyota'</span>];</span><br><span class="line"><span class="keyword">var</span> carsObj = cars.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">obj, name,index,arr</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// obj：初始值 后面定义的  name：循环的item值  index：索引  arr：原数组</span></span><br><span class="line">    obj[name] = obj[name] ? ++obj[name] : <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;, &#123;&#125;);<span class="comment">//定义初始值</span></span><br></pre></td></tr></table></figure><h4 id="生成UUID"><a href="#生成UUID" class="headerlink" title="生成UUID"></a>生成UUID</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">getUUID()&#123;</span><br><span class="line">    <span class="keyword">var</span> chars = <span class="string">'0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'</span>.split(<span class="string">''</span>);</span><br><span class="line">    <span class="keyword">var</span> uuid = [];</span><br><span class="line">    <span class="keyword">var</span> i;</span><br><span class="line">    <span class="keyword">var</span> r;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!uuid[i]) &#123;</span><br><span class="line">            r = <span class="number">0</span> | <span class="built_in">Math</span>.random()*<span class="number">16</span>;</span><br><span class="line">            uuid[i] = chars[(i == <span class="number">19</span>) ? (r &amp; <span class="number">0x3</span>) | <span class="number">0x8</span> : r];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> uuid.join(<span class="string">''</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="获取过去多少天的日历数组"><a href="#获取过去多少天的日历数组" class="headerlink" title="获取过去多少天的日历数组"></a>获取过去多少天的日历数组</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> days = [...Array(<span class="number">7</span>).keys()].map(<span class="function"><span class="params">days</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">Date</span>.now() - <span class="number">86400000</span> * days))</span><br></pre></td></tr></table></figure><h4 id="字符窜比较时间先后"><a href="#字符窜比较时间先后" class="headerlink" title="字符窜比较时间先后"></a>字符窜比较时间先后</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> st = <span class="string">"2014-08-08"</span>;</span><br><span class="line"><span class="keyword">var</span> et = <span class="string">"2014-09-09"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(st&gt;et, st&lt;et); <span class="comment">// false true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"21:00"</span>&lt;<span class="string">"09:10"</span>);  <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"21:00"</span>&gt;<span class="string">"09:10"</span>);   <span class="comment">// true   时间形式注意补0</span></span><br></pre></td></tr></table></figure><h4 id="获取当前时间并每秒刷新"><a href="#获取当前时间并每秒刷新" class="headerlink" title="获取当前时间并每秒刷新"></a>获取当前时间并每秒刷新</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setInterval(<span class="function"><span class="params">()</span>=&gt;</span><span class="built_in">document</span>.body.innerHTML=<span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleString().slice(<span class="number">10</span>,<span class="number">19</span>))</span><br></pre></td></tr></table></figure><h4 id="打乱数组"><a href="#打乱数组" class="headerlink" title="打乱数组"></a>打乱数组</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="function">(<span class="params">arr</span>) =&gt;</span> arr.slice().sort(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">Math</span>.random() - <span class="number">0.5</span>)</span><br><span class="line"><span class="keyword">let</span> b = a([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>])</span><br></pre></td></tr></table></figure><h4 id="生成随机颜色"><a href="#生成随机颜色" class="headerlink" title="生成随机颜色"></a>生成随机颜色</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'#'</span> + <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">0xffffff</span>).toString(<span class="number">16</span>).padEnd(<span class="number">6</span>, <span class="string">'0'</span>));</span><br><span class="line"><span class="comment">//#c618b2</span></span><br></pre></td></tr></table></figure><h4 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="string">"ces"</span>,<span class="string">"ces"</span>,<span class="number">3</span>,<span class="string">"你好"</span>,<span class="string">"你好"</span>,<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> newArr = [...new <span class="built_in">Set</span>(arr1)]</span><br></pre></td></tr></table></figure><h4 id="创建特定大小的数组"><a href="#创建特定大小的数组" class="headerlink" title="创建特定大小的数组"></a>创建特定大小的数组</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [...Array(<span class="number">3</span>).keys()] <span class="comment">//[0,1,2]</span></span><br></pre></td></tr></table></figure><h4 id="保留两位小数，不足补零"><a href="#保留两位小数，不足补零" class="headerlink" title="保留两位小数，不足补零"></a>保留两位小数，不足补零</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addZ</span>(<span class="params">num,len=<span class="number">2</span></span>)</span>&#123; </span><br><span class="line">    num=num.toString() </span><br><span class="line">    <span class="keyword">if</span>(!num.includes(<span class="string">'.'</span>)) num=num+<span class="string">'.'</span> </span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">Object</span>.is(<span class="built_in">Number</span>(num),<span class="literal">NaN</span>))&#123; </span><br><span class="line">        num= <span class="built_in">Number</span>(num).toFixed(len)   </span><br><span class="line">        </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(num.includes(<span class="string">','</span>))&#123; </span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">Object</span>.is(<span class="built_in">Number</span>(num.replace(<span class="regexp">/,/g</span>,<span class="string">''</span>)),<span class="literal">NaN</span>))&#123; </span><br><span class="line">        len=num.indexOf(<span class="string">'.'</span>)+<span class="built_in">Number</span>(len)+<span class="number">1</span> </span><br><span class="line">        num= num.length&lt;len? num.padEnd(len,<span class="string">'0'</span>):num; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> num </span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">console</span>.log(addZ(num,<span class="number">3</span>))</span><br></pre></td></tr></table></figure><h3 id="了解型（可读性比较差）"><a href="#了解型（可读性比较差）" class="headerlink" title="了解型（可读性比较差）"></a>了解型（可读性比较差）</h3><h4 id="取整-类似于parseInt"><a href="#取整-类似于parseInt" class="headerlink" title="取整 类似于parseInt"></a>取整 类似于parseInt</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">~~ <span class="number">3.14159</span> <span class="comment">//3</span></span><br><span class="line"><span class="number">3.14159</span> &gt;&gt; <span class="number">0</span> <span class="comment">//3</span></span><br><span class="line"><span class="number">3.14159</span> | <span class="number">0</span> <span class="comment">//3</span></span><br></pre></td></tr></table></figure><h4 id="比较值是否相等-会将字符窜转化为数字，相等返回0，-不相等返回两个的和"><a href="#比较值是否相等-会将字符窜转化为数字，相等返回0，-不相等返回两个的和" class="headerlink" title="比较值是否相等 会将字符窜转化为数字，相等返回0， 不相等返回两个的和"></a>比较值是否相等 会将字符窜转化为数字，相等返回0， 不相等返回两个的和</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="string">'2'</span> ^ <span class="string">'22'</span>) <span class="comment">//24</span></span><br><span class="line">(<span class="string">'2'</span> ^ <span class="string">'呵'</span>) <span class="comment">//2</span></span><br><span class="line">(<span class="string">'33'</span> ^ <span class="string">'33'</span>) <span class="comment">//0</span></span><br></pre></td></tr></table></figure><h4 id="强制转化为数字"><a href="#强制转化为数字" class="headerlink" title="强制转化为数字"></a>强制转化为数字</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'32'</span> * <span class="number">1</span> <span class="comment">// * 1 转化</span></span><br><span class="line"> <span class="built_in">console</span>.log(+ <span class="string">'123'</span>) <span class="comment">// + 转化</span></span><br></pre></td></tr></table></figure><h4 id="四舍五入精确到指定小数点位数"><a href="#四舍五入精确到指定小数点位数" class="headerlink" title="四舍五入精确到指定小数点位数"></a>四舍五入精确到指定小数点位数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">129</span>;</span><br><span class="line"><span class="keyword">const</span> round = <span class="function">(<span class="params">n, decimals = <span class="number">0</span></span>) =&gt;</span> <span class="built_in">Number</span>(<span class="string">`<span class="subst">$&#123;<span class="built_in">Math</span>.round(<span class="string">`<span class="subst">$&#123;n&#125;</span>e<span class="subst">$&#123;decimals&#125;</span>`</span>)&#125;</span>e-<span class="subst">$&#123;decimals&#125;</span>`</span>)</span><br></pre></td></tr></table></figure><h4 id="数字补零"><a href="#数字补零" class="headerlink" title="数字补零"></a>数字补零</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> addZero1 = <span class="function">(<span class="params">num, len = <span class="number">2</span></span>) =&gt;</span> (<span class="string">`0<span class="subst">$&#123;num&#125;</span>`</span>).slice(-len)</span><br><span class="line"><span class="keyword">const</span> addZero2 = <span class="function">(<span class="params">num, len = <span class="number">2</span></span>) =&gt;</span> (<span class="string">`<span class="subst">$&#123;num&#125;</span>`</span>).padStart( len   , <span class="string">'0'</span>)</span><br><span class="line">addZero1(<span class="number">3</span>) <span class="comment">// 03</span></span><br><span class="line">addZero2(<span class="number">32</span>,<span class="number">4</span>)  <span class="comment">// 0032</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- 已经写好的文章在对应的md文件头部添加top：{number}即可 数值越大优先级越高 --&gt;
&lt;h3 id=&quot;实用型&quot;&gt;&lt;a href=&quot;#实用型&quot; class=&quot;headerlink&quot; title=&quot;实用型&quot;&gt;&lt;/a&gt;实用型&lt;/h3&gt;&lt;h4 id=&quot;获取url查询参
      
    
    </summary>
    
      <category term="js" scheme="wanderfully.club/categories/js/"/>
    
    
      <category term="js" scheme="wanderfully.club/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>canvas悬挂字体</title>
    <link href="wanderfully.club/2019/05/23/canvas%E6%82%AC%E6%8C%82%E5%AD%97%E4%BD%93/"/>
    <id>wanderfully.club/2019/05/23/canvas悬挂字体/</id>
    <published>2019-05-23T10:33:09.000Z</published>
    <updated>2019-05-24T03:17:41.762Z</updated>
    
    <content type="html"><![CDATA[<!-- 已经写好的文章在对应的md文件头部添加top：{number}即可 数值越大优先级越高 --><p><strong><a href="https://wanderfully.club/hangword/">在线demo</a></strong></p><h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><p>引入flaotfont.js<br>html中写canvas标签 并将id赋值为 id=’canvas’ 规定画布大小<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;canvas width=<span class="string">"900"</span> height=<span class="string">"300"</span> id=<span class="string">'canvas'</span>&gt;&lt;/canvas&gt;</span><br></pre></td></tr></table></figure></p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- 已经写好的文章在对应的md文件头部添加top：{number}即可 数值越大优先级越高 --&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://wanderfully.club/hangword/&quot;&gt;在线demo&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=
      
    
    </summary>
    
      <category term="canvas" scheme="wanderfully.club/categories/canvas/"/>
    
    
      <category term="canvas" scheme="wanderfully.club/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>react中px转rem或vw</title>
    <link href="wanderfully.club/2019/05/22/react%E4%B8%ADpx%E8%BD%ACrem%E6%88%96vw/"/>
    <id>wanderfully.club/2019/05/22/react中px转rem或vw/</id>
    <published>2019-05-22T07:32:22.000Z</published>
    <updated>2019-05-23T10:30:26.686Z</updated>
    
    <content type="html"><![CDATA[<!-- 已经写好的文章在对应的md文件头部添加top：{number}即可 数值越大优先级越高 --><h3 id="一、px转rem"><a href="#一、px转rem" class="headerlink" title="一、px转rem"></a>一、px转rem</h3><h4 id="执行显示webpack配置"><a href="#执行显示webpack配置" class="headerlink" title="执行显示webpack配置"></a>执行显示webpack配置</h4><p><code>npm run eject</code></p><h4 id="安装-postcss-px2rem-exclude、lib-flexible、sass-loader、node-sass"><a href="#安装-postcss-px2rem-exclude、lib-flexible、sass-loader、node-sass" class="headerlink" title="安装 postcss-px2rem-exclude、lib-flexible、sass-loader、node-sass"></a>安装 postcss-px2rem-exclude、lib-flexible、sass-loader、node-sass</h4><p><code>npm insatll lib-flexible sass-loader node-sass postcss-px2rem-exclude --save</code></p><h4 id="修改webpack-config-js-先引入postcss-px2rem-exclude-然后在postcss-loader的plugins中加入"><a href="#修改webpack-config-js-先引入postcss-px2rem-exclude-然后在postcss-loader的plugins中加入" class="headerlink" title="修改webpack.config.js,先引入postcss-px2rem-exclude,然后在postcss-loader的plugins中加入"></a>修改webpack.config.js,先引入postcss-px2rem-exclude,然后在postcss-loader的plugins中加入</h4><p><code>const px2rem = require(&#39;postcss-px2rem-exclude&#39;);</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    loader: <span class="built_in">require</span>.resolve(<span class="string">'postcss-loader'</span>),</span><br><span class="line">    options: &#123;</span><br><span class="line">        ident: <span class="string">'postcss'</span>,</span><br><span class="line">        plugins: <span class="function"><span class="params">()</span> =&gt;</span> [</span><br><span class="line">        <span class="built_in">require</span>(<span class="string">'postcss-flexbugs-fixes'</span>),</span><br><span class="line">        autoprefixer(&#123;</span><br><span class="line">            browsers: [</span><br><span class="line">            <span class="string">'&gt;1%'</span>,</span><br><span class="line">            <span class="string">'last 4 versions'</span>,</span><br><span class="line">            <span class="string">'Firefox ESR'</span>,</span><br><span class="line">            <span class="string">'not ie &lt; 9'</span>, <span class="comment">// React doesn't support IE8 anyway</span></span><br><span class="line">            ],</span><br><span class="line">            flexbox: <span class="string">'no-2009'</span>,</span><br><span class="line">        &#125;),</span><br><span class="line">    <span class="comment">//px2rem加在这里</span></span><br><span class="line">        px2rem(&#123;</span><br><span class="line">            remUnit:<span class="number">75</span>,<span class="attr">exclude</span>: <span class="regexp">/node_modules/i</span></span><br><span class="line">        &#125;)</span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><h4 id="在react入口文件引入lib-flexible"><a href="#在react入口文件引入lib-flexible" class="headerlink" title="在react入口文件引入lib-flexible"></a>在react入口文件引入lib-flexible</h4><p><code>import &quot;lib-flexible&quot;</code></p><h4 id="修改index-html-禁止缩放"><a href="#修改index-html-禁止缩放" class="headerlink" title="修改index.html 禁止缩放"></a>修改index.html 禁止缩放</h4><p><code>&lt;meta content=&quot;width=device-width,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no&quot; name=&quot;viewport&quot; /&gt;</code></p><h4 id="完成后重启才能生效"><a href="#完成后重启才能生效" class="headerlink" title="完成后重启才能生效"></a>完成后重启才能生效</h4><p><code>npm start</code></p><h3 id="二、px转vw"><a href="#二、px转vw" class="headerlink" title="二、px转vw"></a>二、px转vw</h3><h4 id="安装需要的插件"><a href="#安装需要的插件" class="headerlink" title="安装需要的插件"></a>安装需要的插件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -D postcss-<span class="keyword">import</span> postcss-url cssnano-preset-advanced </span><br><span class="line">npm install -S postcss-aspect-ratio-mini postcss-px-to-viewport postcss-write-svg postcss-cssnext cssnano postcss-viewport-units</span><br></pre></td></tr></table></figure><h4 id="index-html修改禁止缩放"><a href="#index-html修改禁止缩放" class="headerlink" title="index.html修改禁止缩放"></a>index.html修改禁止缩放</h4><p><code>&lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=1, maximum-scale=1, user-scalable=no,width=device-width&quot;&gt;</code></p><h4 id="新建配置文件-postcssrc-js-并配置"><a href="#新建配置文件-postcssrc-js-并配置" class="headerlink" title="新建配置文件 .postcssrc.js 并配置"></a>新建配置文件 .postcssrc.js 并配置</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="string">"plugins"</span>: &#123;</span><br><span class="line">    <span class="string">"postcss-import"</span>: &#123;&#125;,</span><br><span class="line">    <span class="string">"postcss-url"</span>: &#123;&#125;,</span><br><span class="line">    <span class="string">"postcss-aspect-ratio-mini"</span>: &#123;&#125;,</span><br><span class="line">    <span class="string">"postcss-write-svg"</span>: &#123;</span><br><span class="line">      utf8: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"postcss-cssnext"</span>: &#123;&#125;,</span><br><span class="line">    <span class="string">"postcss-px-to-viewport"</span>: &#123;</span><br><span class="line">      viewportWidth: <span class="number">750</span>,</span><br><span class="line">      viewportHeight: <span class="number">1334</span>, <span class="comment">// (Number) The height of the viewport. </span></span><br><span class="line">      unitPrecision: <span class="number">3</span>, <span class="comment">// (Number) The decimal numbers to allow the REM units to grow to. </span></span><br><span class="line">      viewportUnit: <span class="string">'vw'</span>, <span class="comment">// (String) Expected units. </span></span><br><span class="line">      selectorBlackList: [<span class="string">'.ignore'</span>, <span class="string">'.hairlines'</span>], <span class="comment">// (Array) The selectors to ignore and leave as px. </span></span><br><span class="line">      minPixelValue: <span class="number">1</span>, <span class="comment">// (Number) Set the minimum pixel value to replace. </span></span><br><span class="line">      mediaQuery: <span class="literal">false</span> <span class="comment">// (Boolean) Allow px to be converted in media queries.</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"postcss-viewport-units"</span>: &#123;&#125;,</span><br><span class="line">    <span class="string">"cssnano"</span>: &#123;</span><br><span class="line">      preset: <span class="string">"advanced"</span>,</span><br><span class="line">      autoprefixer: <span class="literal">false</span>,</span><br><span class="line">      <span class="string">"postcss-zindex"</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="vw的兼容处理（有些手机不支持vw单位）"><a href="#vw的兼容处理（有些手机不支持vw单位）" class="headerlink" title="vw的兼容处理（有些手机不支持vw单位）"></a>vw的兼容处理（有些手机不支持vw单位）</h4><p><code>npm install viewport-units-buggyfill --save</code></p><p>在项目入口处（如main.js）引入<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> hacks = <span class="built_in">require</span>(<span class="string">'viewport-units-buggyfill.hacks'</span>);</span><br><span class="line"><span class="built_in">require</span>(‘viewport-units-buggyfill‘).init(&#123;</span><br><span class="line">    hacks: hacks</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>或者在index.html中引入并初始化<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"//g.alicdn.com/fdilab/lib3rd/viewport-units-buggyfill/0.6.2/??viewport-units-buggyfill.hacks.min.js,viewport-units-buggyfill.min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">window</span>.viewportUnitsBuggyfill.init(&#123;</span><br><span class="line">        hacks: <span class="built_in">window</span>.viewportUnitsBuggyfillHacks</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="在webpack-config-js中引入并在-postcss-loader-中使用插件"><a href="#在webpack-config-js中引入并在-postcss-loader-中使用插件" class="headerlink" title="在webpack.config.js中引入并在 postcss-loader 中使用插件"></a>在webpack.config.js中引入并在 postcss-loader 中使用插件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> postcssAspectRatioMini = <span class="built_in">require</span>(<span class="string">'postcss-aspect-ratio-mini'</span>)</span><br><span class="line"><span class="keyword">const</span> postcssPxToViewport = <span class="built_in">require</span>(<span class="string">'postcss-px-to-viewport'</span>)</span><br><span class="line"><span class="keyword">const</span> postcssWriteSvg = <span class="built_in">require</span>(<span class="string">'postcss-write-svg'</span>)</span><br><span class="line"><span class="keyword">const</span> postcssCssnext = <span class="built_in">require</span>(<span class="string">'postcss-cssnext'</span>)</span><br><span class="line"><span class="keyword">const</span> postcssViewportUnits = <span class="built_in">require</span>(<span class="string">'postcss-viewport-units'</span>)</span><br><span class="line"><span class="keyword">const</span> cssnano = <span class="built_in">require</span>(<span class="string">'cssnano'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    loader: <span class="built_in">require</span>.resolve(<span class="string">'postcss-loader'</span>),</span><br><span class="line">    options: &#123;</span><br><span class="line">      <span class="comment">// Necessary for external CSS imports to work</span></span><br><span class="line">      <span class="comment">// https://github.com/facebookincubator/create-react-app/issues/2677</span></span><br><span class="line">      ident: <span class="string">'postcss'</span>,</span><br><span class="line">      plugins: <span class="function"><span class="params">()</span> =&gt;</span> [</span><br><span class="line">        <span class="built_in">require</span>(<span class="string">'postcss-flexbugs-fixes'</span>),</span><br><span class="line">        autoprefixer(&#123;</span><br><span class="line">          browsers: [</span><br><span class="line">            <span class="string">'&gt;1%'</span>,</span><br><span class="line">            <span class="string">'last 4 versions'</span>,</span><br><span class="line">            <span class="string">'Firefox ESR'</span>,</span><br><span class="line">            <span class="string">'not ie &lt; 9'</span> <span class="comment">// React doesn't support IE8 anyway</span></span><br><span class="line">          ],</span><br><span class="line">          flexbox: <span class="string">'no-2009'</span></span><br><span class="line">        &#125;),</span><br><span class="line">        postcssAspectRatioMini(&#123;&#125;),</span><br><span class="line">        postcssPxToViewport(&#123;</span><br><span class="line">          viewportWidth: <span class="number">750</span>, <span class="comment">// (Number) The width of the viewport.</span></span><br><span class="line">          viewportHeight: <span class="number">1334</span>, <span class="comment">// (Number) The height of the viewport.</span></span><br><span class="line">          unitPrecision: <span class="number">3</span>, <span class="comment">// (Number) The decimal numbers to allow the REM units to grow to.</span></span><br><span class="line">          viewportUnit: <span class="string">'vw'</span>, <span class="comment">// (String) Expected units.</span></span><br><span class="line">          selectorBlackList: [<span class="string">'.ignore'</span>, <span class="string">'.hairlines'</span>], <span class="comment">// (Array) The selectors to ignore and leave as px.</span></span><br><span class="line">          minPixelValue: <span class="number">1</span>, <span class="comment">// (Number) Set the minimum pixel value to replace.</span></span><br><span class="line">          mediaQuery: <span class="literal">false</span> <span class="comment">// (Boolean) Allow px to be converted in media queries.</span></span><br><span class="line">        &#125;),</span><br><span class="line">        postcssWriteSvg(&#123;</span><br><span class="line">          utf8: <span class="literal">false</span></span><br><span class="line">        &#125;),</span><br><span class="line">        postcssCssnext(&#123;&#125;),</span><br><span class="line">        postcssViewportUnits(&#123;&#125;),</span><br><span class="line">        cssnano(&#123;</span><br><span class="line">          preset: <span class="string">'advanced'</span>,</span><br><span class="line">          autoprefixer: <span class="literal">false</span>,</span><br><span class="line">          <span class="string">'postcss-zindex'</span>: <span class="literal">false</span></span><br><span class="line">        &#125;)</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="重启后生效"><a href="#重启后生效" class="headerlink" title="重启后生效"></a>重启后生效</h4><p><code>npm start</code></p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- 已经写好的文章在对应的md文件头部添加top：{number}即可 数值越大优先级越高 --&gt;
&lt;h3 id=&quot;一、px转rem&quot;&gt;&lt;a href=&quot;#一、px转rem&quot; class=&quot;headerlink&quot; title=&quot;一、px转rem&quot;&gt;&lt;/a&gt;一、px转rem&lt;
      
    
    </summary>
    
      <category term="React" scheme="wanderfully.club/categories/React/"/>
    
    
      <category term="react" scheme="wanderfully.club/tags/react/"/>
    
      <category term="webpack" scheme="wanderfully.club/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序路由跳转</title>
    <link href="wanderfully.club/2019/05/20/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%B0%8F%E5%9D%91/"/>
    <id>wanderfully.club/2019/05/20/微信小程序小坑/</id>
    <published>2019-05-20T09:54:52.000Z</published>
    <updated>2019-05-22T07:37:45.189Z</updated>
    
    <content type="html"><![CDATA[<!-- 已经写好的文章在对应的md文件头部添加top：{number}即可 数值越大优先级越高 --><h3 id="一、navigateTo和redirectTo"><a href="#一、navigateTo和redirectTo" class="headerlink" title="一、navigateTo和redirectTo"></a>一、navigateTo和redirectTo</h3><p>&emsp;当使用 <strong>wx.navigateTo</strong>（打开新页面） 和 <strong>wx.redirectTo</strong>（页面重定向）的时候只能打开非tabBar的页面，所以路由tabBar的页面是打不开的。</p><h3 id="二、switchTab"><a href="#二、switchTab" class="headerlink" title="二、switchTab"></a>二、switchTab</h3><p>&emsp;使用<strong>wx.switchTab</strong>只能打开tabBar的页面。</p><h3 id="三、relunach"><a href="#三、relunach" class="headerlink" title="三、relunach"></a>三、relunach</h3><p>&emsp;使用<strong>relunach</strong>可以打开任何页面。</p><h3 id="四、tabBar"><a href="#四、tabBar" class="headerlink" title="四、tabBar"></a>四、tabBar</h3><p>&emsp;页面底部的 tabBar 由页面决定，即只要是定义为 tabBar 的页面，底部都有 tabBar。</p><h3 id="五、路由带的参数"><a href="#五、路由带的参数" class="headerlink" title="五、路由带的参数"></a>五、路由带的参数</h3><p>&emsp;调用页面路由带的参数可以在目标页面的onLoad中获取。</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- 已经写好的文章在对应的md文件头部添加top：{number}即可 数值越大优先级越高 --&gt;
&lt;h3 id=&quot;一、navigateTo和redirectTo&quot;&gt;&lt;a href=&quot;#一、navigateTo和redirectTo&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="微信小程序" scheme="wanderfully.club/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="路由" scheme="wanderfully.club/tags/%E8%B7%AF%E7%94%B1/"/>
    
  </entry>
  
</feed>
